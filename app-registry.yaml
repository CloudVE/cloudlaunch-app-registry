apps:
  - slug: rna-seq
    name: RNA-Seq
    status: LIVE
    summary: Galaxy tailored for RNA-seq analyses
    maintainer: bjoern.gruening@gmail.com
    description: ''
    info_url: null
    icon_url: https://i.imgur.com/nOSTRsz.png
    display_order: 10000
    default_version: Latest
    default_launch_config: ''
    versions:
    - version: Latest
      frontend_component_path: |-
        app/marketplace/plugins/plugins.module#PluginsModule
      frontend_component_name: clui-ubuntu-config
      backend_component_name: |-
        cloudlaunch.backend_plugins.simple_web_app.SimpleWebAppPlugin
      default_launch_config:
        config_cloudlaunch:
          firewall:
          - rules:
            - cidr: 0.0.0.0/0
              from: '80'
              protocol: tcp
              to: '80'
            - cidr: 0.0.0.0/0
              from: '8080'
              protocol: tcp
              to: '8080'
            - cidr: 0.0.0.0/0
              from: '22'
              protocol: tcp
              to: '22'
            - cidr: 0.0.0.0/0
              from: '20'
              protocol: tcp
              to: '21'
            securityGroup: cloudlaunch-docker
          instance_user_data: |-
            #!/bin/bash
            docker run -d -p 8080:80 -p 8021:21 -p 8022:22 quay.io/bgruening/galaxy-rna-seq:latest
          vmType: c4.large
  - slug: rna-structural-analysis
    name: RNA structural analysis
    status: LIVE
    summary: Galaxy for RNA structural analysis
    maintainer: bjoern.gruening@gmail.com
    description: "The RNA Galaxy workbench is a comprehensive set of analysis tools\
      \ and consolidated workflows. The current implementation comprises more than 50\
      \ bioinformatics tools dedicated to different research areas of RNA biology, including\
      \ RNA structure analysis, RNA alignment, RNA annotation, RNA-protein interaction,\
      \ ribosome profiling, RNA-Seq analysis, and RNA target prediction.\r\n\r\nThe\
      \ workbench is developed by the RNA Bioinformatics Center (RBC). This center is\
      \ one of the eight service units of the German Network for Bioinformatics Infrastructure,\
      \ running the German ELIXIR Node."
    info_url: http://bgruening.github.io/galaxy-rna-workbench/
    icon_url: https://i.imgur.com/vo0xCko.png
    display_order: 10000
    default_version: Latest
    default_launch_config: ''
    versions:
    - version: Latest
      frontend_component_path: |-
        app/marketplace/plugins/plugins.module#PluginsModule
      frontend_component_name: clui-ubuntu-config
      backend_component_name: |-
        cloudlaunch.backend_plugins.simple_web_app.SimpleWebAppPlugin
      default_launch_config:
        config_cloudlaunch:
          firewall:
          - rules:
            - cidr: 0.0.0.0/0
              from: '80'
              protocol: tcp
              to: '80'
            - cidr: 0.0.0.0/0
              from: '22'
              protocol: tcp
              to: '22'
            - cidr: 0.0.0.0/0
              from: '20'
              protocol: tcp
              to: '21'
            securityGroup: cloudlaunch-docker
          instanceType: m1.large
          instance_user_data: |-
            #!/bin/bash
            docker run -d -p 8888:80 -p 8021:21 -p 8022:22 quay.io/bgruening/galaxy-rna-structural-analysis:latest
  - slug: exome-seq
    name: Exome-Seq
    status: LIVE
    summary: Galaxy tailored for Exome-seq analyses
    maintainer: bjoern.gruening@gmail.com
    description: ''
    info_url: null
    icon_url: https://i.imgur.com/hij1TQV.png
    display_order: 10000
    default_version: Latest
    default_launch_config: ''
    versions:
    - version: Latest
      frontend_component_path: |-
        app/marketplace/plugins/plugins.module#PluginsModule
      frontend_component_name: clui-ubuntu-config
      backend_component_name: |-
        cloudlaunch.backend_plugins.simple_web_app.SimpleWebAppPlugin
      default_launch_config:
        config_cloudlaunch:
          firewall:
          - rules:
            - cidr: 0.0.0.0/0
              from: '80'
              protocol: tcp
              to: '80'
            - cidr: 0.0.0.0/0
              from: '22'
              protocol: tcp
              to: '22'
            - cidr: 0.0.0.0/0
              from: '20'
              protocol: tcp
              to: '21'
            securityGroup: cloudlaunch-docker
          instanceType: m1.large
          instance_user_data: |-
            #!/bin/bash
            docker run -d -p 8888:80 -p 8021:21 -p 8022:22 quay.io/bgruening/galaxy-exome-seq:latest
  - slug: docker-galaxy
    name: Base Galaxy
    status: LIVE
    summary: A blank instance of Galaxy.
    maintainer: bjoern.gruening@gmail.com
    description: |-
      The Galaxy Docker Image is an easy distributable full-fledged Galaxy installation that can be used for testing, teaching and presenting new tools and features. This appliance will launch a virtual machine with Galaxy running inside a Docker container. Note that it takes up to 20 minutes for this appliance to start.
    info_url: https://github.com/bgruening/docker-galaxy-stable
    icon_url: https://i.imgur.com/jktC9QS.png
    display_order: 10000
    default_version: Latest
    default_launch_config: ''
    versions:
    - version: No-container
      frontend_component_path: |-
        app/marketplace/plugins/plugins.module#PluginsModule
      frontend_component_name: clui-ubuntu-config
      backend_component_name: |-
        cloudlaunch.backend_plugins.base_vm_app.BaseVMAppPlugin
      default_launch_config:
        config_cloudlaunch:
          firewall:
          - rules:
            - cidr: 0.0.0.0/0
              from: '80'
              protocol: tcp
              to: '80'
            - cidr: 0.0.0.0/0
              from: '22'
              protocol: tcp
              to: '22'
            - cidr: 0.0.0.0/0
              from: '30000'
              protocol: tcp
              to: '30100'
            securityGroup: cloudlaunch-docker
          instanceType: m1.small
    - version: Latest
      frontend_component_path: |-
        app/marketplace/plugins/plugins.module#PluginsModule
      frontend_component_name: clui-ubuntu-config
      backend_component_name: |-
        cloudlaunch.backend_plugins.simple_web_app.SimpleWebAppPlugin
      default_launch_config:
        config_cloudlaunch:
          firewall:
          - rules:
            - cidr: 0.0.0.0/0
              from: '80'
              protocol: tcp
              to: '80'
            - cidr: 0.0.0.0/0
              from: '22'
              protocol: tcp
              to: '22'
            - cidr: 0.0.0.0/0
              from: '20'
              protocol: tcp
              to: '21'
            - cidr: 0.0.0.0/0
              from: '30000'
              protocol: tcp
              to: '30100'
            securityGroup: cloudlaunch-docker
          instanceType: m1.large
          instance_user_data: |-
            #!/bin/bash
            docker run --privileged -d -p 8888:80 -p 8021:21 -p 8022:22 quay.io/bgruening/galaxy:17.05.cvmfs
  - slug: galaxy-stanalone-vm
    name: Galaxy Standalone VM
    status: LIVE
    summary: |-
      A standalone Galaxy virtual machine, configured and ready for use.
    maintainer: enis.afgan@jhu.edu
    description: "This is a standalone Galaxy server that comes preconfigured with hundreds\
      \ of tools and commonly used reference datasets: just launch and use. If you want\
      \ to use more than one virtual machine, take a look at the Galaxy CloudMan or\
      \ the Genomics Virtual Lab appliances.\r\n\r\nIt is necessary to launch an instance\
      \ type of Large or larger."
    info_url: https://wiki.galaxyproject.org/Cloud/Jetstream
    icon_url: https://i.imgur.com/XdDJNnF.png
    display_order: 10000
    default_version: '17.05'
    default_launch_config: ''
    versions:
    - version: '16.07'
      frontend_component_path: |-
        app/marketplace/plugins/plugins.module#PluginsModule
      frontend_component_name: clui-ubuntu-config
      backend_component_name: |-
        cloudlaunch.backend_plugins.simple_web_app.SimpleWebAppPlugin
      default_launch_config:
        config_cloudlaunch:
          firewall:
          - rules:
            - cidr: 0.0.0.0/0
              from: '80'
              protocol: tcp
              to: '80'
            - cidr: 0.0.0.0/0
              from: '22'
              protocol: tcp
              to: '22'
            - cidr: 0.0.0.0/0
              from: '20'
              protocol: tcp
              to: '21'
            - cidr: 0.0.0.0/0
              from: '30000'
              protocol: tcp
              to: '40000'
            securityGroup: cl-gxy-standalone
          vmType: m1.large
    - version: '18.05'
      frontend_component_path: |-
        app/marketplace/plugins/plugins.module#PluginsModule
      frontend_component_name: clui-ubuntu-config
      backend_component_name: |-
        cloudlaunch.backend_plugins.simple_web_app.SimpleWebAppPlugin
      default_launch_config:
        config_cloudlaunch:
          firewall:
          - rules:
            - cidr: 0.0.0.0/0
              from: '80'
              protocol: tcp
              to: '80'
            - cidr: 0.0.0.0/0
              from: '22'
              protocol: tcp
              to: '22'
            - cidr: 0.0.0.0/0
              from: '20'
              protocol: tcp
              to: '21'
            - cidr: 0.0.0.0/0
              from: '30000'
              protocol: tcp
              to: '40000'
            - cidr: 0.0.0.0/0
              from: '30000'
              protocol: tcp
              src_group: CloudLaunch
              to: '30100'
            securityGroup: cl-gxy-standalone
          instanceType: m1.large
    - version: '17.01'
      frontend_component_path: |-
        app/marketplace/plugins/plugins.module#PluginsModule
      frontend_component_name: clui-ubuntu-config
      backend_component_name: |-
        cloudlaunch.backend_plugins.simple_web_app.SimpleWebAppPlugin
      default_launch_config:
        config_cloudlaunch:
          firewall:
          - rules:
            - cidr: 0.0.0.0/0
              from: '80'
              protocol: tcp
              to: '80'
            - cidr: 0.0.0.0/0
              from: '22'
              protocol: tcp
              to: '22'
            - cidr: 0.0.0.0/0
              from: '20'
              protocol: tcp
              to: '21'
            - cidr: 0.0.0.0/0
              from: '30000'
              protocol: tcp
              to: '40000'
            - cidr: 0.0.0.0/0
              from: '30000'
              protocol: tcp
              src_group: CloudLaunchTMP
              to: '30100'
            securityGroup: cl-gxy-standalone
          instanceType: m1.large
          instance_user_data: "#cloud-config\n  package_upgrade: false\n"
    - version: '17.05'
      frontend_component_path: |-
        app/marketplace/plugins/plugins.module#PluginsModule
      frontend_component_name: clui-ubuntu-config
      backend_component_name: |-
        cloudlaunch.backend_plugins.simple_web_app.SimpleWebAppPlugin
      default_launch_config:
        config_cloudlaunch:
          firewall:
          - rules:
            - cidr: 0.0.0.0/0
              from: '80'
              protocol: tcp
              to: '80'
            - cidr: 0.0.0.0/0
              from: '22'
              protocol: tcp
              to: '22'
            - cidr: 0.0.0.0/0
              from: '20'
              protocol: tcp
              to: '21'
            - cidr: 0.0.0.0/0
              from: '30000'
              protocol: tcp
              to: '40000'
            - cidr: 0.0.0.0/0
              from: '30000'
              protocol: tcp
              src_group: CloudLaunch
              to: '30100'
            securityGroup: cl-gxy-standalone
          instanceType: m1.large
  - slug: cloudman-cluster
    name: CloudMan Cluster
    status: DEV
    summary: A standalone Slurm cluster-in-the-cloud
    maintainer: The Galaxy Team
    description: |-
      This appliance creates a traditional batch cluster based on the Slurm job scheduler. You can dynamically scale the size of the cluster through CloudMan web interface and submit the jobs just link on any other Slurm cluster.
    info_url: http://cloudman.irb.hr/
    icon_url: https://i.imgur.com/4cJu1lC.png
    display_order: 10000
    default_version: '16.11'
    default_launch_config: ''
    versions:
    - version: '16.05'
      frontend_component_path: |-
        app/marketplace/plugins/plugins.module#PluginsModule
      frontend_component_name: clui-cloudman-config
      backend_component_name: |-
        cloudlaunch.backend_plugins.cloudman_app.CloudManAppPlugin
      default_launch_config: ''
    - version: '16.11'
      frontend_component_path: |-
        app/marketplace/plugins/plugins.module#PluginsModule
      frontend_component_name: clui-cloudman-config
      backend_component_name: |-
        cloudlaunch.backend_plugins.cloudman_app.CloudManAppPlugin
      default_launch_config:
        config_cloudlaunch:
          firewall:
          - rules:
            - cidr: 0.0.0.0/0
              from: '80'
              protocol: tcp
              to: '80'
            - cidr: 0.0.0.0/0
              from: '22'
              protocol: tcp
              to: '22'
            securityGroup: cloudlaunch-cm
          instanceType: m3.medium
        config_cloudman:
          clusterType: Data
          cluster_templates:
          - filesystem_templates:
            - archive_md5: b4c822ec2494fca9810d0d127d7b6722
              archive_url: |-
                https://swift.rc.nectar.org.au:8888/v1/AUTH_377/cloudman-gvl-400/gvl-galaxyfs-4.0.0.tar.gz
              data_source: archive
              name: galaxy
              roles: galaxyTools,galaxyData
              type: transient
            - archive_md5: 4b360787af3672a2f20ab0ce961912bc
              archive_url: |-
                https://swift.rc.nectar.org.au:8888/v1/AUTH_377/cloudman-gvl-400/gvl-indices-tutorial-4.0.0.tar.gz
              name: galaxyIndices
              roles: galaxyIndices
              type: transient
            name: Galaxy
          - filesystem_templates:
            - name: galaxy
              type: volume
            name: Data
          defaultBucket: cloudman-dev
          storageType: transient
  - slug: biodocklet
    name: BioDocklet
    status: LIVE
    summary: |-
      Abstract the complex data operations of multi-step, bioinformatics pipelines for NGS data analysis.
    maintainer: thahmina.ali62@myhunter.cuny.edu
    description: ''
    info_url: https://www.youtube.com/watch?v=27HLdQVq7_g
    icon_url: http://i.imgur.com/ViePkQP.jpg
    display_order: 10000
    default_version: RNA-Seq - paired
    default_launch_config: ''
    versions:
    - version: RNA-Seq - paired
      frontend_component_path: |-
        app/marketplace/plugins/plugins.module#PluginsModule
      frontend_component_name: clui-ubuntu-config
      backend_component_name: |-
        cloudlaunch.backend_plugins.base_vm_app.BaseVMAppPlugin
      default_launch_config:
        config_cloudlaunch:
          firewall:
          - rules:
            - cidr: 0.0.0.0/0
              from: '80'
              protocol: tcp
              to: '80'
            - cidr: 0.0.0.0/0
              from: '8090'
              protocol: tcp
              to: '8090'
            - cidr: 0.0.0.0/0
              from: '22'
              protocol: tcp
              to: '22'
            - cidr: 0.0.0.0/0
              from: '9010'
              protocol: tcp
              to: '9010'
            securityGroup: cloudlaunch-biodocklet
          instanceType: c3.large
          instance_user_data: |-
            #!/bin/bash
            docker pull bcil/biodocklets:RNAseq_paired
    - version: ChIP-Seq - single
      frontend_component_path: |-
        app/marketplace/plugins/plugins.module#PluginsModule
      frontend_component_name: clui-ubuntu-config
      backend_component_name: |-
        cloudlaunch.backend_plugins.base_vm_app.BaseVMAppPlugin
      default_launch_config:
        config_cloudlaunch:
          firewall:
          - rules:
            - cidr: 0.0.0.0/0
              from: '80'
              protocol: tcp
              to: '80'
            - cidr: 0.0.0.0/0
              from: '8090'
              protocol: tcp
              to: '8090'
            - cidr: 0.0.0.0/0
              from: '22'
              protocol: tcp
              to: '22'
            - cidr: 0.0.0.0/0
              from: '9010'
              protocol: tcp
              to: '9010'
            securityGroup: cloudlaunch-biodocklet
          instanceType: c3.large
          instance_user_data: |-
            #!/bin/bash
            docker pull bcil/biodocklets:ChIPseq_single
    - version: ChIP-Seq - paired
      frontend_component_path: |-
        app/marketplace/plugins/plugins.module#PluginsModule
      frontend_component_name: clui-ubuntu-config
      backend_component_name: |-
        cloudlaunch.backend_plugins.base_vm_app.BaseVMAppPlugin
      default_launch_config:
        config_cloudlaunch:
          firewall:
          - rules:
            - cidr: 0.0.0.0/0
              from: '80'
              protocol: tcp
              to: '80'
            - cidr: 0.0.0.0/0
              from: '8090'
              protocol: tcp
              to: '8090'
            - cidr: 0.0.0.0/0
              from: '22'
              protocol: tcp
              to: '22'
            - cidr: 0.0.0.0/0
              from: '9010'
              protocol: tcp
              to: '9010'
            securityGroup: cloudlaunch-biodocklet
          instanceType: c3.large
          instance_user_data: |-
            #!/bin/bash
            docker pull bcil/biodocklets:ChIPseq_paired
  - slug: ubuntu
    name: Ubuntu
    status: LIVE
    summary: Ubuntu operating system
    maintainer: Canonical Inc.
    description: "Ubuntu is a Debian-based Linux operating system and distribution for\
      \ personal computers, smartphones and network servers. This appliance is a bare-bones\
      \ version of this operating system.\r\n\r\nOn Jetstream images with Docker, login\
      \ as root system user."
    info_url: |-
      https://en.wikipedia.org/wiki/Ubuntu_(operating_system)
    icon_url: |-
      https://upload.wikimedia.org/wikipedia/commons/3/3a/Logo-ubuntu_no%28r%29-black_orange-hex.svg?download
    display_order: 1030
    default_version: 16.04 (with Docker)
    default_launch_config: ''
    versions:
    - version: '14.04'
      frontend_component_path: |-
        app/marketplace/plugins/plugins.module#PluginsModule
      frontend_component_name: clui-ubuntu-config
      backend_component_name: |-
        cloudlaunch.backend_plugins.base_vm_app.BaseVMAppPlugin
      default_launch_config: ''
    - version: 16.04 (with Docker)
      frontend_component_path: |-
        app/marketplace/plugins/plugins.module#PluginsModule
      frontend_component_name: clui-ubuntu-config
      backend_component_name: |-
        cloudlaunch.backend_plugins.base_vm_app.BaseVMAppPlugin
      default_launch_config:
        config_cloudlaunch:
          firewall:
          - rules:
            - cidr: 0.0.0.0/0
              from: '22'
              protocol: tcp
              to: '22'
            - cidr: 0.0.0.0/0
              from: '80'
              protocol: tcp
              to: '80'
            - cidr: 0.0.0.0/0
              from: '443'
              protocol: tcp
              to: '443'
            - cidr: 0.0.0.0/0
              from: '4430'
              protocol: tcp
              to: '4430'
            - cidr: 0.0.0.0/0
              from: '6443'
              protocol: tcp
              to: '6443'
            - cidr: 0.0.0.0/0
              from: '2379'
              protocol: tcp
              to: '2380'
            - cidr: 0.0.0.0/0
              from: '10250'
              protocol: tcp
              to: '10250'
            - cidr: 0.0.0.0/0
              from: '10251'
              protocol: tcp
              to: '10251'
            - cidr: 0.0.0.0/0
              from: '10252'
              protocol: tcp
              to: '10252'
            - cidr: 0.0.0.0/0
              from: '10256'
              protocol: tcp
              to: '10256'
            - cidr: 0.0.0.0/0
              from: '30000'
              protocol: tcp
              to: '32767'
            securityGroup: cloudlaunch-vm
          vmType: m1.small
    - version: 16.04 (bare)
      frontend_component_path: |-
        app/marketplace/plugins/plugins.module#PluginsModule
      frontend_component_name: clui-ubuntu-config
      backend_component_name: |-
        cloudlaunch.backend_plugins.base_vm_app.BaseVMAppPlugin
      default_launch_config:
        config_cloudlaunch:
          firewall:
          - rules:
            - cidr: 0.0.0.0/0
              from: '22'
              protocol: tcp
              to: '22'
            securityGroup: cloudlaunch-vm
          vmType: t2.nano
    - version: '18.04'
      frontend_component_path: |-
        app/marketplace/plugins/plugins.module#PluginsModule
      frontend_component_name: clui-ubuntu-config
      backend_component_name: |-
        cloudlaunch.backend_plugins.base_vm_app.BaseVMAppPlugin
      default_launch_config:
        config_cloudlaunch:
          firewall:
          - rules:
            - cidr: 0.0.0.0/0
              from: '22'
              protocol: tcp
              to: '22'
            securityGroup: cloudlaunch-vm
          vmType: m1.small
  - slug: chemical-toolbox
    name: Chemical toolbox
    status: LIVE
    summary: Galaxy tailored for cheminformatics
    maintainer: bjoern.gruening@gmail.com
    description: |-
      The ChemicalToolBoX is a set of tools integrated into the Galaxy-workflow-management system to enable researchers easy-to-use, reproducible, and transparent access to cheminformatics libraries and drug discovery tools. It includes standard applications for similarity and substructure searches, clustering of compounds, prediction of properties and descriptors, filtering, and many other tools that range from drug-likeness classification to fragmentation and fragment-merging. By combinating the various tools many more powerful applications can be designed.
    info_url: https://galaxyproject.org/chemical-tool-box/
    icon_url: https://i.imgur.com/NhIZvB1.png
    display_order: 10000
    default_version: Latest
    default_launch_config: ''
    versions:
    - version: Latest
      frontend_component_path: |-
        app/marketplace/plugins/plugins.module#PluginsModule
      frontend_component_name: clui-ubuntu-config
      backend_component_name: |-
        cloudlaunch.backend_plugins.simple_web_app.SimpleWebAppPlugin
      default_launch_config:
        config_cloudlaunch:
          firewall:
          - rules:
            - cidr: 0.0.0.0/0
              from: '80'
              protocol: tcp
              to: '80'
            - cidr: 0.0.0.0/0
              from: '22'
              protocol: tcp
              to: '22'
            - cidr: 0.0.0.0/0
              from: '20'
              protocol: tcp
              to: '21'
            securityGroup: cloudlaunch-docker
          instanceType: m1.medium
          instance_user_data: |-
            #!/bin/bash
            docker run -d -p 8888:80 -p 8021:21 -p 8022:22 quay.io/bgruening/galaxy-chemicaltoolbox:latest
  - slug: docker_launch
    name: Docker Launch
    status: DEV
    summary: |-
      This app can launch arbitrary docker containers on a given cloud.
    maintainer: null
    description: |-
      This app can launch arbitrary docker containers on a given cloud. Select the docker container from docker hub, change the desired port mappings and environment variables and hit launch.
    info_url: null
    icon_url: https://i.imgur.com/jktC9QS.png
    display_order: 10000
    default_version: '0.1'
    default_launch_config: ''
    versions:
    - version: '0.1'
      frontend_component_path: |-
        app/marketplace/plugins/plugins.module#PluginsModule
      frontend_component_name: clui-docker-config
      backend_component_name: |-
        cloudlaunch.backend_plugins.docker_app.DockerAppPlugin
      default_launch_config:
        config_cloudlaunch:
          firewall:
          - rules:
            - cidr: 0.0.0.0/0
              from: '80'
              protocol: tcp
              to: '80'
            - cidr: 0.0.0.0/0
              from: '22'
              protocol: tcp
              to: '22'
            - cidr: 0.0.0.0/0
              from: '20'
              protocol: tcp
              to: '21'
            securityGroup: cloudlaunch-dockerl
          vmType: m1.medium
  - slug: galaxy-cloud
    name: Galaxy CloudMan
    status: LIVE
    summary: |-
      Pre-configured Galaxy instance on a scalable cluster-in-the-cloud. DEPRECATED - USE THE GVL INSTEAD.
    maintainer: enis.afgan@jhu.edu
    description: "Galaxy is an open, web-based platform for data intensive biomedical\
      \ research. Whether on the free public server or your own instance, you can perform,\
      \ reproduce, and share complete analyses. This appliance comes preconfigured with\
      \ hundreds of tools and terabytes of reference genomes. Further, the amount of\
      \ compute capacity can be dynamically scaled with CloudMan.\r\nOnce you have launched\
      \ this appliance, to login to the CloudMan interface, use username ubuntu and\
      \ the password you choose during the launch process.\r\n\r\nDedicated Galaxy CloudMan\
      \ has been DEPRECATED in favor of the Genomics Virtual Lab (GVL). The GVL is a\
      \ superset of Galaxy CloudMan and will be only updated appliance starting with\
      \ Galaxy release 17.09. See this page for more info: https://galaxyproject.org/news/2018-01-22-gvl430/"
    info_url: https://galaxyproject.org/
    icon_url: https://i.imgur.com/bVPmVYo.png
    display_order: 1020
    default_version: '17.05'
    default_launch_config: ''
    versions:
    - version: '16.04'
      frontend_component_path: |-
        app/marketplace/plugins/plugins.module#PluginsModule
      frontend_component_name: clui-cloudman-config
      backend_component_name: |-
        cloudlaunch.backend_plugins.cloudman_app.CloudManAppPlugin
      default_launch_config: ''
    - version: '16.07'
      frontend_component_path: |-
        app/marketplace/plugins/plugins.module#PluginsModule
      frontend_component_name: clui-cloudman-config
      backend_component_name: |-
        cloudlaunch.backend_plugins.cloudman_app.CloudManAppPlugin
      default_launch_config:
        config_cloudlaunch:
          firewall:
          - rules:
            - cidr: 0.0.0.0/0
              from: '80'
              protocol: tcp
              to: '80'
            - cidr: 0.0.0.0/0
              from: '22'
              protocol: tcp
              to: '22'
            - cidr: 0.0.0.0/0
              from: '443'
              protocol: tcp
              to: '443'
            - cidr: 0.0.0.0/0
              from: '20'
              protocol: tcp
              to: '21'
            - cidr: 0.0.0.0/0
              from: '30000'
              protocol: tcp
              to: '30100'
            - from: '1'
              protocol: tcp
              src_group: cloudlaunch-cm
              to: '65535'
            securityGroup: cloudlaunch-cm
          instanceType: c3.large
          provider_settings:
            ebsOptimised: false
        config_cloudman:
          clusterType: Galaxy
          cluster_templates:
          - filesystem_templates:
            - archive_url: |-
                http://s3.amazonaws.com/cloudman/fs-archives/galaxyFS-20161101.tar.gz
              data_source: archive
              name: galaxy
              roles: galaxyTools,galaxyData
              size: 50
            - mount_point: /cvmfs/data.galaxyproject.org
              name: galaxyIndices
              roles: galaxyIndices
              type: cvmfs
            name: Galaxy
          - filesystem_templates:
            - name: galaxy
              type: volume
            name: Data
          cm_remote_filename: cm16.tar.gz
          defaultBucket: cloudman
          storageType: volume
    - version: '16.10'
      frontend_component_path: |-
        app/marketplace/plugins/plugins.module#PluginsModule
      frontend_component_name: clui-cloudman-config
      backend_component_name: |-
        cloudlaunch.backend_plugins.cloudman_app.CloudManAppPlugin
      default_launch_config:
        config_cloudlaunch:
          firewall:
          - rules:
            - cidr: 0.0.0.0/0
              from: '80'
              protocol: tcp
              to: '80'
            - cidr: 0.0.0.0/0
              from: '22'
              protocol: tcp
              to: '22'
            - cidr: 0.0.0.0/0
              from: '443'
              protocol: tcp
              to: '443'
            - cidr: 0.0.0.0/0
              from: '20'
              protocol: tcp
              to: '21'
            - cidr: 0.0.0.0/0
              from: '30000'
              protocol: tcp
              to: '30100'
            - from: '1'
              protocol: tcp
              src_group: cloudlaunch-cm
              to: '65535'
            securityGroup: cloudlaunch-cm
          instanceType: c3.large
          provider_settings:
            ebsOptimized: false
        config_cloudman:
          clusterType: Galaxy
          cluster_templates:
          - filesystem_templates:
            - archive_url: |-
                http://s3.amazonaws.com/cloudman/fs-archives/galaxyFS-20170125.tar.gz
              data_source: archive
              name: galaxy
              roles: galaxyTools,galaxyData
              size: 50
            - mount_point: /cvmfs/data.galaxyproject.org
              name: galaxyIndices
              roles: galaxyIndices
              type: cvmfs
            name: Galaxy
          - filesystem_templates:
            - name: galaxy
              type: volume
            name: Data
          cm_remote_filename: cm16.tar.gz
          defaultBucket: cloudman
          storageType: volume
    - version: dev
      frontend_component_path: |-
        app/marketplace/plugins/plugins.module#PluginsModule
      frontend_component_name: clui-cloudman-config
      backend_component_name: |-
        cloudlaunch.backend_plugins.cloudman_app.CloudManAppPlugin
      default_launch_config:
        config_cloudlaunch:
          firewall:
          - rules:
            - cidr: 0.0.0.0/0
              from: '80'
              protocol: tcp
              to: '80'
            - cidr: 0.0.0.0/0
              from: '22'
              protocol: tcp
              to: '22'
            - cidr: 0.0.0.0/0
              from: '443'
              protocol: tcp
              to: '443'
            - cidr: 0.0.0.0/0
              from: '20'
              protocol: tcp
              to: '21'
            - cidr: 0.0.0.0/0
              from: '30000'
              protocol: tcp
              to: '30100'
            - from: '1'
              protocol: tcp
              src_group: cloudlaunch-cm
              to: '65535'
            securityGroup: cloudlaunch-cm
          instanceType: c3.large
          provider_settings:
            ebsOptimised: true
        config_cloudman:
          clusterType: Galaxy
          cluster_templates:
          - filesystem_templates:
            - archive_url: |-
                http://s3.amazonaws.com/cloudman/fs-archives/galaxyFS-latest.tar.gz
              data_source: archive
              name: galaxy
              roles: galaxyTools,galaxyData
              size: 50
            - mount_point: /cvmfs/data.galaxyproject.org
              name: galaxyIndices
              roles: galaxyIndices
              type: cvmfs
            name: Galaxy
          - filesystem_templates:
            - name: galaxy
              type: volume
            name: Data
          defaultBucket: cloudman-dev
          storageType: transient
    - version: '17.05'
      frontend_component_path: |-
        app/marketplace/plugins/plugins.module#PluginsModule
      frontend_component_name: clui-cloudman-config
      backend_component_name: |-
        cloudlaunch.backend_plugins.cloudman_app.CloudManAppPlugin
      default_launch_config:
        config_cloudlaunch:
          firewall:
          - rules:
            - cidr: 0.0.0.0/0
              from: '80'
              protocol: tcp
              to: '80'
            - cidr: 0.0.0.0/0
              from: '22'
              protocol: tcp
              to: '22'
            - cidr: 0.0.0.0/0
              from: '443'
              protocol: tcp
              to: '443'
            - cidr: 0.0.0.0/0
              from: '20'
              protocol: tcp
              to: '21'
            - cidr: 0.0.0.0/0
              from: '30000'
              protocol: tcp
              to: '30100'
            - from: '1'
              protocol: tcp
              src_group: cloudlaunch-cm
              to: '65535'
            securityGroup: cloudlaunch-cm
          instanceType: m4.xlarge
          provider_settings:
            ebsOptimised: false
        config_cloudman:
          clusterType: Galaxy
          cluster_templates:
          - filesystem_templates:
            - archive_url: |-
                http://s3.amazonaws.com/cloudman/fs-archives/galaxyFS-20170622.tar.gz
              data_source: archive
              name: galaxy
              roles: galaxyTools,galaxyData
              size: 50
            - mount_point: /cvmfs/data.galaxyproject.org
              name: galaxyIndices
              roles: galaxyIndices
              type: cvmfs
            name: Galaxy
          - filesystem_templates:
            - name: galaxy
              type: volume
            name: Data
          defaultBucket: cloudman-test
          storageType: volume
  - slug: cloudgene
    name: Cloudgene
    status: LIVE
    summary: Run Hadoop-based genomics analyses
    maintainer: Sebastian.Schoenherr@i-med.ac.at
    description: ''
    info_url: null
    icon_url: null
    display_order: 10000
    default_version: Latest
    default_launch_config: ''
    versions:
    - version: Latest
      frontend_component_path: |-
        app/marketplace/plugins/plugins.module#PluginsModule
      frontend_component_name: clui-ubuntu-config
      backend_component_name: |-
        cloudlaunch.backend_plugins.simple_web_app.SimpleWebAppPlugin
      default_launch_config:
        config_cloudlaunch:
          firewall:
          - rules:
            - cidr: 0.0.0.0/0
              from: '80'
              protocol: tcp
              to: '80'
            - cidr: 0.0.0.0/0
              from: '8080'
              protocol: tcp
              to: '8080'
            - cidr: 0.0.0.0/0
              from: '22'
              protocol: tcp
              to: '22'
            securityGroup: cloudlaunch-docker
          instance_user_data: |-
            #!/bin/bash
            docker run -d -p 8080:80 genepi/cloudgene
          vmType: c4.large
  - slug: centos
    name: CentOS
    status: LIVE
    summary: Stock CentOS
    maintainer: Jetstream
    description: ''
    info_url: null
    icon_url: null
    display_order: 10000
    default_version: '7.4'
    default_launch_config:
      config_appliance:
        sshUser: root
      config_cloudlaunch:
        firewall:
        - rules:
          - cidr: 0.0.0.0/0
            from: '80'
            protocol: tcp
            to: '80'
          - cidr: 0.0.0.0/0
            from: '22'
            protocol: tcp
            to: '22'
          securityGroup: cloudlaunch-vm
        vmType: m1.small
    versions:
    - version: '7.4'
      frontend_component_path: |-
        app/marketplace/plugins/plugins.module#PluginsModule
      frontend_component_name: clui-ubuntu-config
      backend_component_name: |-
        cloudlaunch.backend_plugins.base_vm_app.BaseVMAppPlugin
      default_launch_config: ''
  - slug: cloudman-20
    name: CloudMan 2.0
    status: LIVE
    summary: An all-new version of CloudMan
    maintainer: |-
      enis.afgan@jhu.edu, nuwan.goonasekera@unimelb.ed.au
    description: |-
      This appliance will launch a new version of CloudMan - at the moment, this is purely for development purposes and the application has no useful features yet.
    info_url: |-
      https://docs.google.com/presentation/d/1h9PVEGdVIHEat_JWTjYZWuU1R23IeGlMW8PZd8yJVuE/edit#slide=id.p
    icon_url: https://i.imgur.com/4cJu1lC.png
    display_order: 1050
    default_version: dev
    default_launch_config: ''
    versions:
    - version: ea-dev
      frontend_component_path: |-
        app/marketplace/plugins/plugins.module#PluginsModule
      frontend_component_name: clui-cm2-config
      backend_component_name: |-
        cloudlaunch.backend_plugins.cloudman2_app.CloudMan2AppPlugin
      default_launch_config:
        config_appliance:
          inventoryTemplate: |-
            ${host}

            [all:vars]
            ansible_ssh_port=22
            ansible_user='${user}'
            ansible_ssh_private_key_file=pk
            ansible_ssh_extra_args='-o StrictHostKeyChecking=no'
          repository: https://github.com/CloudVE/ansible-docker-boot
          runner: ansible
          sshUser: ubuntu
        config_cloudlaunch:
          firewall:
          - rules:
            - cidr: 0.0.0.0/0
              from: '22'
              protocol: tcp
              to: '22'
            - cidr: 0.0.0.0/0
              from: '80'
              protocol: tcp
              to: '80'
            - cidr: 0.0.0.0/0
              from: '443'
              protocol: tcp
              to: '443'
            - cidr: 0.0.0.0/0
              from: '4430'
              protocol: tcp
              to: '4430'
            - cidr: 0.0.0.0/0
              from: '6443'
              protocol: tcp
              to: '6443'
            - cidr: 0.0.0.0/0
              from: '2379'
              protocol: tcp
              to: '2380'
            - cidr: 0.0.0.0/0
              from: '10250'
              protocol: tcp
              to: '10250'
            - cidr: 0.0.0.0/0
              from: '10251'
              protocol: tcp
              to: '10251'
            - cidr: 0.0.0.0/0
              from: '10252'
              protocol: tcp
              to: '10252'
            - cidr: 0.0.0.0/0
              from: '10256'
              protocol: tcp
              to: '10256'
            - cidr: 0.0.0.0/0
              from: '30000'
              protocol: tcp
              to: '32767'
            - from: '1'
              protocol: tcp
              src_group: cloudlaunch-cm2
              to: '65535'
            - from: '1'
              protocol: udp
              src_group: cloudlaunch-cm2
              to: '65535'
            securityGroup: cloudlaunch-cm2
          vmType: m1.medium
        config_cloudman2:
          cm_boot_image: cloudve/cloudman-boot:latest
          cm_helm_values: |-
            cluster_type: KUBE_RANCHER
            rancher_url: "https://{{ rancher_server }}:{{ rancher_port }}"
            rancher_api_key: "{{ token }}"
            rancher_cluster_id: "{{ cluster_id }}"
            rancher_project_id: "{{ project_id }}"
            cm_initial_cluster_data: "{{ cm_initial_cluster_data|default('') }}"

            helmsman_config:
              repositories:
                - name: cloudve
                  url: https://raw.githubusercontent.com/CloudVE/helm-charts/gvl_5.0.0_alpha/
                - name: jupyterhub
                  url: https://jupyterhub.github.io/helm-chart/
              charts:
                cvmfs:
                  name: cloudve/galaxy-cvmfs-csi
                  namespace: cvmfs
                  values:
                    cache:
                      size: 10000
                galaxy:
                  name: cloudve/galaxy
                  namespace: default
                  oidc_client:
                    client_secret: {{ random_client_secret }}
                    redirect_uris:
                      - '{{ '{{' }} include "cloudman.root_url" . {{ '}}{{' }} .Values.helmsman_config.charts.galaxy.values.ingress.path {{ '}}' }}/authnz/custos/callback'
                  tplValues:
                    configs:
                      oidc_backends_config.xml: |
                        <?xml version="1.0"?>
                        <OIDC>
                            <provider name="custos">
                                <url>https://{{ rancher_server }}/auth</url>
                                <client_id>galaxy-auth</client_id>
                                <client_secret>{{ '{{' }}.Values.helmsman_config.charts.galaxy.oidc_client.client_secret {{ '}}' }}</client_secret>
                                <redirect_uri>https://{{ rancher_server }}{{ '{{' }} .Values.helmsman_config.charts.galaxy.values.ingress.path {{ '}}' }}/authnz/custos/callback</redirect_uri>
                                <realm>master</realm>
                            </provider>
                        </OIDC>
                  values:
                    image:
                      repository: galaxy/galaxy-k8s
                      tag: 20.01
                    configs:
                      galaxy.yml:
                        galaxy:
                          enable_oidc: true
                          oidc_config_file: /galaxy/server/config/oidc_config.xml
                          oidc_backends_config_file: /galaxy/server/config/oidc_backends_config.xml
                          session_duration: 30
                      oidc_config.xml: |
                        <?xml version="1.0"?>
                        <OIDC>
                            <Setter Property="VERIFY_SSL" Value="False" Type="bool"/>
                            <Setter Property="REQUESTS_TIMEOUT" Value="3600" Type="float"/>
                            <Setter Property="ID_TOKEN_MAX_AGE" Value="3600" Type="float"/>
                        </OIDC>
                    persistence:
                      storageClass: nfs
                      size: 70Gi
                    postgresql:
                      postgresqlPassword: {{ random_client_secret }}
                      postgresqlPostgresPassword: {{ random_client_secret }}
                      persistence:
                        storageClass: ebs
                    ingress:
                      enabled: true
                      annotations:
                        kubernetes.io/tls-acme: "true"
                        cert-manager.io/cluster-issuer: letsencrypt-prod
                        nginx.ingress.kubernetes.io/secure-backends: "true"
                      hosts:
                        - ~
            {% if not (rancher_server | ipaddr) %}
                        - "{{ rancher_server }}"
                      tls:
                        - secretName: "{{ rancher_server | replace('.', '-') }}-key"
                          hosts:
                            - "{{ rancher_server }}"
            {% endif %}
                      path: /default/galaxy

            cloudlaunch:
              resources:
                  requests:
                    cpu: 100m
                    memory: 500Mi
                  limits:
                    cpu: 1000m
                    memory: 3000Mi
              cloudlaunchserver:
                  resources:
                    requests:
                      cpu: 500m
                      memory: 1500Mi
                    limits:
                      cpu: 1000m
                      memory: 5000Mi
                  admin_password: "{{ rancher_password }}"
                  postgresql:
                    postgresqlPassword: {{ random_client_secret }}
                    postgresqlPostgresPassword: {{ random_client_secret }}
                    persistence:
                        storageClass: "ebs"
                  ingress:
                    annotations:
                        kubernetes.io/tls-acme: "true"
                        cert-manager.io/cluster-issuer: letsencrypt-prod
                        nginx.ingress.kubernetes.io/secure-backends: "true"
                    hosts:
                        - ~
            {% if not (rancher_server | ipaddr) %}
                        - "{{ rancher_server }}"
                    tls:
                        - secretName: "{{ rancher_server | replace('.', '-') }}-key"
                          hosts:
                            - "{{ rancher_server }}"
            {% endif %}
              ingress:
                  annotations:
                    kubernetes.io/tls-acme: "true"
                    cert-manager.io/cluster-issuer: letsencrypt-prod
                    nginx.ingress.kubernetes.io/secure-backends: "true"
                  hosts:
                    - ~
            {% if not (rancher_server | ipaddr) %}
                    - "{{ rancher_server }}"
                  tls:
                    - secretName: "{{ rancher_server | replace('.', '-') }}-key"
                      hosts:
                        - "{{ rancher_server }}"
            {% endif %}
            prometheus:
              persistence:
                  storageClass: "nfs"
              grafana:
                  adminPassword: {{ random_client_secret }}
                  grafana.ini:
                    server:
                        root_url: "https://{{ rancher_server }}/grafana"
                    auth.generic_oauth:
                        auth_url: "https://{{ rancher_server }}/auth/realms/master/protocol/openid-connect/auth"
                        token_url: "https://{{ rancher_server }}/auth/realms/master/protocol/openid-connect/token"
                        api_url: "https://{{ rancher_server }}/auth/realms/master/protocol/openid-connect/userinfo"
                  ingress:
                    annotations:
                        kubernetes.io/tls-acme: "true"
                        cert-manager.io/cluster-issuer: letsencrypt-prod
                        nginx.ingress.kubernetes.io/secure-backends: "true"
                    hosts:
                        - ~
            {% if not (rancher_server | ipaddr) %}
                        - "{{ rancher_server }}"
                    tls:
                        - secretName: "{{ rancher_server | replace('.', '-') }}-key"
                          hosts:
                            - "{{ rancher_server }}"
            {% endif %}
            keycloak:
              keycloak:
                  resources:
                    requests:
                        cpu: 100m
                        memory: 750Mi
                    limits:
                        cpu: 1000m
                        memory: 2000Mi
                  password: "{{ rancher_password }}"
                  ingress:
                    enabled: true
                    path: /auth
                    annotations:
                        kubernetes.io/tls-acme: "true"
                        cert-manager.io/cluster-issuer: letsencrypt-prod
                        nginx.ingress.kubernetes.io/secure-backends: "true"
                    hosts:
                        - ~
            {% if not (rancher_server | ipaddr) %}
                        - "{{ rancher_server }}"
                    tls:
                        - secretName: "{{ rancher_server | replace('.', '-') }}-key"
                          hosts:
                            - "{{ rancher_server }}"
            {% endif %}
            global:
              domain: "{{ rancher_server }}"
              deployment_name: "{{ cm_deployment_name }}"
    - version: am-dev
      frontend_component_path: |-
        app/marketplace/plugins/plugins.module#PluginsModule
      frontend_component_name: clui-cm2-config
      backend_component_name: |-
        cloudlaunch.backend_plugins.cloudman2_app.CloudMan2AppPlugin
      default_launch_config:
        config_appliance:
          inventoryTemplate: |-
            ${host}

            [all:vars]
            ansible_ssh_port=22
            ansible_user='${user}'
            ansible_ssh_private_key_file=pk
            ansible_ssh_extra_args='-o StrictHostKeyChecking=no'
          repository: https://github.com/CloudVE/ansible-docker-boot
          runner: ansible
          sshUser: ubuntu
        config_cloudlaunch:
          firewall:
          - rules:
            - cidr: 0.0.0.0/0
              from: '22'
              protocol: tcp
              to: '22'
            - cidr: 0.0.0.0/0
              from: '80'
              protocol: tcp
              to: '80'
            - cidr: 0.0.0.0/0
              from: '443'
              protocol: tcp
              to: '443'
            - cidr: 0.0.0.0/0
              from: '4430'
              protocol: tcp
              to: '4430'
            - cidr: 0.0.0.0/0
              from: '6443'
              protocol: tcp
              to: '6443'
            - cidr: 0.0.0.0/0
              from: '2379'
              protocol: tcp
              to: '2380'
            - cidr: 0.0.0.0/0
              from: '10250'
              protocol: tcp
              to: '10250'
            - cidr: 0.0.0.0/0
              from: '10251'
              protocol: tcp
              to: '10251'
            - cidr: 0.0.0.0/0
              from: '10252'
              protocol: tcp
              to: '10252'
            - cidr: 0.0.0.0/0
              from: '10256'
              protocol: tcp
              to: '10256'
            - cidr: 0.0.0.0/0
              from: '30000'
              protocol: tcp
              to: '32767'
            - from: '1'
              protocol: tcp
              src_group: cloudlaunch-cm2
              to: '65535'
            - from: '1'
              protocol: udp
              src_group: cloudlaunch-cm2
              to: '65535'
            securityGroup: cloudlaunch-cm2
          vmType: m1.medium
        config_cloudman2:
          cm_boot_image: almahmoud/cloudman-boot:latest
          cm_helm_values: |-
            projman_config:
              projects:
                - name: initial
            cluster_type: KUBE_RANCHER
            rancher_url: "https://{{ rancher_server }}:{{ rancher_port }}"
            rancher_api_key: "{{ token }}"
            rancher_cluster_id: "{{ cluster_id }}"
            rancher_project_id: "{{ project_id }}"
            cm_initial_cluster_data: "{{ cm_initial_cluster_data|default('') }}"

            helmsman_config:
              repositories:
                 - name: cloudve
                   url: https://raw.githubusercontent.com/almahmoud/helm-charts/master/
                 - name: jupyterhub
                   url: https://jupyterhub.github.io/helm-chart/
              charts:
                galaxy:
                  name: cloudve/galaxy
                  namespace: initial
                  oidc_client:
                    client_secret: {{ random_client_secret }}
                    redirect_uris:
                      - '{{ '{{' }} include "cloudman.root_url" . {{ '}}{{' }} .Values.helmsman_config.charts.galaxy.values.ingress.path {{ '}}' }}/authnz/custos/callback'
                  tplValues:
                    configs:
                      oidc_backends_config.xml: |
                        <?xml version="1.0"?>
                        <OIDC>
                            <provider name="custos">
                                <url>https://{{ rancher_server }}/auth</url>
                                <client_id>galaxy-auth</client_id>
                                <client_secret>{{ '{{' }}.Values.helmsman_config.charts.galaxy.oidc_client.client_secret {{ '}}' }}</client_secret>
                                <redirect_uri>https://{{ rancher_server }}{{ '{{' }} .Values.helmsman_config.charts.galaxy.values.ingress.path {{ '}}' }}/authnz/custos/callback</redirect_uri>
                                <realm>master</realm>
                            </provider>
                        </OIDC>
                  values:
                    image:
                      repository: galaxy/galaxy-k8s
                      tag: 20.01-dev
                    configs:
                      galaxy.yml:
                        galaxy:
                          session_duration: 30
                    persistence:
                      storageClass: nfs
                      size: 80Gi
                    postgresql:
                      postgresqlPassword: {{ random_client_secret }}
                      postgresqlPostgresPassword: {{ random_client_secret }}
                      persistence:
                        storageClass: ebs
                    ingress:
                      enabled: true
                      annotations:
                         kubernetes.io/tls-acme: "true"
                         cert-manager.io/cluster-issuer: letsencrypt-prod
                         nginx.ingress.kubernetes.io/secure-backends: "true"
                      hosts:
                         - ~
            {% if not (rancher_server | ipaddr) %}
                         - "{{ rancher_server }}"
                      tls:
                         - secretName: "{{ rancher_server | replace('.', '-') }}-key"
                           hosts:
                             - "{{ rancher_server }}"
            {% endif %}
                      path: /initial/galaxy

            cloudlaunch:
               rabbitmq:
                  rabbitmqErlangCookie: {{ random_client_secret }}{{ random_client_secret }}
               image:
                  repository: almahmoud/cloudman-ui
                  tag: latest
               resources:
                  requests:
                    cpu: 100m
                    memory: 500Mi
                  limits:
                    cpu: 1000m
                    memory: 3000Mi
               cloudlaunchserver:
                  image:
                    repository: almahmoud/cloudman-server
                    tag: latest
                  resources:
                    requests:
                      cpu: 500m
                      memory: 1500Mi
                    limits:
                      cpu: 1000m
                      memory: 5000Mi
                  admin_password: "{{ rancher_password }}"
                  postgresql:
                     postgresqlPassword: {{ random_client_secret }}
                     postgresqlPostgresPassword: {{ random_client_secret }}
                     persistence:
                        storageClass: "ebs"
                  ingress:
                     annotations:
                        kubernetes.io/tls-acme: "true"
                        cert-manager.io/cluster-issuer: letsencrypt-prod
                        nginx.ingress.kubernetes.io/secure-backends: "true"
                     hosts:
                        - ~
            {% if not (rancher_server | ipaddr) %}
                        - "{{ rancher_server }}"
                     tls:
                        - secretName: "{{ rancher_server | replace('.', '-') }}-key"
                          hosts:
                            - "{{ rancher_server }}"
            {% endif %}
               ingress:
                  annotations:
                     kubernetes.io/tls-acme: "true"
                     cert-manager.io/cluster-issuer: letsencrypt-prod
                     nginx.ingress.kubernetes.io/secure-backends: "true"
                  hosts:
                     - ~
            {% if not (rancher_server | ipaddr) %}
                     - "{{ rancher_server }}"
                  tls:
                     - secretName: "{{ rancher_server | replace('.', '-') }}-key"
                       hosts:
                         - "{{ rancher_server }}"
            {% endif %}
            prometheus:
               persistence:
                  storageClass: "nfs"
               alertmanager:
                  config:
                     global:
                        http_config:
                           basic_auth:
                              password: {{ random_client_secret }}
               grafana:
                  adminPassword: {{ random_client_secret }}
                  grafana.ini:
                     server:
                        root_url: "https://{{ rancher_server }}/grafana"
                     auth.generic_oauth:
                        auth_url: "https://{{ rancher_server }}/auth/realms/master/protocol/openid-connect/auth"
                        token_url: "https://{{ rancher_server }}/auth/realms/master/protocol/openid-connect/token"
                        api_url: "https://{{ rancher_server }}/auth/realms/master/protocol/openid-connect/userinfo"
                  ingress:
                     annotations:
                        kubernetes.io/tls-acme: "true"
                        cert-manager.io/cluster-issuer: letsencrypt-prod
                        nginx.ingress.kubernetes.io/secure-backends: "true"
                     hosts:
                        - ~
            {% if not (rancher_server | ipaddr) %}
                        - "{{ rancher_server }}"
                     tls:
                        - secretName: "{{ rancher_server | replace('.', '-') }}-key"
                          hosts:
                            - "{{ rancher_server }}"
            {% endif %}
            keycloak:
               keycloak:
                   resources:
                     requests:
                        cpu: 100m
                        memory: 750Mi
                     limits:
                        cpu: 1000m
                        memory: 2000Mi
                   password: "{{ rancher_password }}"
                   ingress:
                     enabled: true
                     path: /auth
                     annotations:
                        kubernetes.io/tls-acme: "true"
                        cert-manager.io/cluster-issuer: letsencrypt-prod
                        nginx.ingress.kubernetes.io/secure-backends: "true"
                     hosts:
                        - ~
            {% if not (rancher_server | ipaddr) %}
                        - "{{ rancher_server }}"
                     tls:
                        - secretName: "{{ rancher_server | replace('.', '-') }}-key"
                          hosts:
                            - "{{ rancher_server }}"
            {% endif %}
            influxdb:
              setDefaultUser:
                password: {{ random_client_secret }}
            global:
               domain: "{{ rancher_server }}"
               deployment_name: "{{ cm_deployment_name }}"
- version: dev
      frontend_component_path: |-
        app/marketplace/plugins/plugins.module#PluginsModule
      frontend_component_name: clui-cm2-config
      backend_component_name: |-
        cloudlaunch.backend_plugins.cloudman2_app.CloudMan2AppPlugin
      default_launch_config:
        config_appliance:
          inventoryTemplate: |-
            ${host}

            [all:vars]
            ansible_ssh_port=22
            ansible_user='${user}'
            ansible_ssh_private_key_file=pk
            ansible_ssh_extra_args='-o StrictHostKeyChecking=no'
          repository: https://github.com/CloudVE/ansible-docker-boot
          runner: ansible
          sshUser: ubuntu
        config_cloudlaunch:
          firewall:
          - rules:
            - cidr: 0.0.0.0/0
              from: '22'
              protocol: tcp
              to: '22'
            - cidr: 0.0.0.0/0
              from: '80'
              protocol: tcp
              to: '80'
            - cidr: 0.0.0.0/0
              from: '443'
              protocol: tcp
              to: '443'
            - cidr: 0.0.0.0/0
              from: '4430'
              protocol: tcp
              to: '4430'
            - cidr: 0.0.0.0/0
              from: '6443'
              protocol: tcp
              to: '6443'
            - cidr: 0.0.0.0/0
              from: '2379'
              protocol: tcp
              to: '2380'
            - cidr: 0.0.0.0/0
              from: '10250'
              protocol: tcp
              to: '10250'
            - cidr: 0.0.0.0/0
              from: '10251'
              protocol: tcp
              to: '10251'
            - cidr: 0.0.0.0/0
              from: '10252'
              protocol: tcp
              to: '10252'
            - cidr: 0.0.0.0/0
              from: '10256'
              protocol: tcp
              to: '10256'
            - cidr: 0.0.0.0/0
              from: '30000'
              protocol: tcp
              to: '32767'
            - from: '1'
              protocol: tcp
              src_group: cloudlaunch-cm2
              to: '65535'
            - from: '1'
              protocol: udp
              src_group: cloudlaunch-cm2
              to: '65535'
            securityGroup: cloudlaunch-cm2
          vmType: m1.medium
        config_cloudman2:
          cm_boot_image: galaxy/cloudman-boot:latest
          cm_helm_values: |-
            cluster_type: KUBE_RANCHER
            rancher_url: "https://{{ rancher_server }}:{{ rancher_port }}"
            rancher_api_key: "{{ token }}"
            rancher_cluster_id: "{{ cluster_id }}"
            rancher_project_id: "{{ project_id }}"
            cm_initial_cluster_data: "{{ cm_initial_cluster_data|default('') }}"
            helmsman_config:
              repositories:
                 - name: cloudve
                   url: https://raw.githubusercontent.com/CloudVE/helm-charts/master/
                 - name: jupyterhub
                   url: https://jupyterhub.github.io/helm-chart/
              charts:
                galaxy:
                  name: cloudve/galaxy
                  namespace: initial
                  oidc_client:
                    client_secret: {{ random_client_secret }}
                    redirect_uris:
                      - '{{ '{{' }} include "cloudman.root_url" . {{ '}}{{' }} .Values.helmsman_config.charts.galaxy.values.ingress.path {{ '}}' }}/authnz/custos/callback'
                  tplValues:
                    configs:
                      oidc_backends_config.xml: |
                        <?xml version="1.0"?>
                        <OIDC>
                            <provider name="custos">
                                <url>https://{{ rancher_server }}/auth</url>
                                <client_id>galaxy-auth</client_id>
                                <client_secret>{{ '{{' }}.Values.helmsman_config.charts.galaxy.oidc_client.client_secret {{ '}}' }}</client_secret>
                                <redirect_uri>https://{{ rancher_server }}{{ '{{' }} .Values.helmsman_config.charts.galaxy.values.ingress.path {{ '}}' }}/authnz/custos/callback</redirect_uri>
                                <realm>master</realm>
                                <enable_idp_logout>true</enable_idp_logout>
                                <post_logout_redirect_uri>https://{{ rancher_server }}{{ '{{' }} .Values.helmsman_config.charts.galaxy.values.ingress.path {{ '}}' }}/</post_logout_redirect_uri>
                            </provider>
                        </OIDC>
                  values:
                    image:
                      repository: galaxy/galaxy-k8s
                      tag: 20.01-dev
                    persistence:
                      storageClass: nfs
                      size: 80Gi
                    postgresql:
                      postgresqlPassword: {{ random_client_secret }}
                      postgresqlPostgresPassword: {{ random_client_secret }}
                      persistence:
                        storageClass: ebs
                    ingress:
                      enabled: true
                      annotations:
                         kubernetes.io/tls-acme: "true"
                         cert-manager.io/cluster-issuer: letsencrypt-prod
                         nginx.ingress.kubernetes.io/secure-backends: "true"
                      hosts:
                         - ~
            {% if not (rancher_server | ipaddr) %}
                         - "{{ rancher_server }}"
                      tls:
                         - secretName: "{{ rancher_server | replace('.', '-') }}-key"
                           hosts:
                             - "{{ rancher_server }}"
            {% endif %}
                      path: /initial/galaxy

            cloudlaunch:
               rabbitmq:
                  rabbitmqErlangCookie: {{ random_client_secret }}{{ random_client_secret }}
               image:
                  repository: galaxy/cloudman-ui
                  tag: latest
               resources:
                  requests:
                    cpu: 100m
                    memory: 500Mi
                  limits:
                    cpu: 1000m
                    memory: 3000Mi
               cloudlaunchserver:
                  image:
                    repository: galaxy/cloudman-server
                    tag: latest
                  resources:
                    requests:
                      cpu: 500m
                      memory: 1500Mi
                    limits:
                      cpu: 1000m
                      memory: 5000Mi
                  admin_password: "{{ rancher_password }}"
                  postgresql:
                     postgresqlPassword: {{ random_client_secret }}
                     postgresqlPostgresPassword: {{ random_client_secret }}
                     persistence:
                        storageClass: "ebs"
                  ingress:
                     annotations:
                        kubernetes.io/tls-acme: "true"
                        cert-manager.io/cluster-issuer: letsencrypt-prod
                        nginx.ingress.kubernetes.io/secure-backends: "true"
                     hosts:
                        - ~
            {% if not (rancher_server | ipaddr) %}
                        - "{{ rancher_server }}"
                     tls:
                        - secretName: "{{ rancher_server | replace('.', '-') }}-key"
                          hosts:
                            - "{{ rancher_server }}"
            {% endif %}
               ingress:
                  annotations:
                     kubernetes.io/tls-acme: "true"
                     cert-manager.io/cluster-issuer: letsencrypt-prod
                     nginx.ingress.kubernetes.io/secure-backends: "true"
                  hosts:
                     - ~
            {% if not (rancher_server | ipaddr) %}
                     - "{{ rancher_server }}"
                  tls:
                     - secretName: "{{ rancher_server | replace('.', '-') }}-key"
                       hosts:
                         - "{{ rancher_server }}"
            {% endif %}
            prometheus:
               persistence:
                  storageClass: "nfs"
               alertmanager:
                  config:
                     global:
                        http_config:
                           basic_auth:
                              password: {{ random_client_secret }}
               grafana:
                  adminPassword: {{ random_client_secret }}
                  grafana.ini:
                     server:
                        root_url: "https://{{ rancher_server }}/grafana"
                     auth.generic_oauth:
                        auth_url: "https://{{ rancher_server }}/auth/realms/master/protocol/openid-connect/auth"
                        token_url: "https://{{ rancher_server }}/auth/realms/master/protocol/openid-connect/token"
                        api_url: "https://{{ rancher_server }}/auth/realms/master/protocol/openid-connect/userinfo"
                  ingress:
                     annotations:
                        kubernetes.io/tls-acme: "true"
                        cert-manager.io/cluster-issuer: letsencrypt-prod
                        nginx.ingress.kubernetes.io/secure-backends: "true"
                     hosts:
                        - ~
            {% if not (rancher_server | ipaddr) %}
                        - "{{ rancher_server }}"
                     tls:
                        - secretName: "{{ rancher_server | replace('.', '-') }}-key"
                          hosts:
                            - "{{ rancher_server }}"
            {% endif %}
            keycloak:
               keycloak:
                   resources:
                     requests:
                        cpu: 100m
                        memory: 750Mi
                     limits:
                        cpu: 1000m
                        memory: 2000Mi
                   password: "{{ rancher_password }}"
                   ingress:
                     enabled: true
                     path: /auth
                     annotations:
                        kubernetes.io/tls-acme: "true"
                        cert-manager.io/cluster-issuer: letsencrypt-prod
                        nginx.ingress.kubernetes.io/secure-backends: "true"
                     hosts:
                        - ~
            {% if not (rancher_server | ipaddr) %}
                        - "{{ rancher_server }}"
                     tls:
                        - secretName: "{{ rancher_server | replace('.', '-') }}-key"
                          hosts:
                            - "{{ rancher_server }}"
            {% endif %}
            influxdb:
              setDefaultUser:
                password: {{ random_client_secret }}
            global:
               domain: "{{ rancher_server }}"
               deployment_name: "{{ cm_deployment_name }}"
  - slug: cm_remote_k8s_pool
    name: Cloudman Remote Compute Pool
    status: DEV
    summary: A remote compute pool for offloading Galaxy jobs
    maintainer: |-
      enis.afgan@jhu.edu, nuwan.goonasekera@unimelb.ed.au
    description: ''
    info_url: |-
      https://docs.google.com/presentation/d/1h9PVEGdVIHEat_JWTjYZWuU1R23IeGlMW8PZd8yJVuE/edit#slide=id.p
    icon_url: https://i.imgur.com/4cJu1lC.png
    display_order: 10000
    default_version: null
    default_launch_config: ''
    versions:
    - version: dev
      frontend_component_path: |-
        app/marketplace/plugins/plugins.module#PluginsModule
      frontend_component_name: clui-cm2-config
      backend_component_name: |-
        cloudlaunch.backend_plugins.cloudman2_app.CloudMan2AppPlugin
      default_launch_config:
        config_appliance:
          inventoryTemplate: |-
            ${host}

            [all:vars]
            ansible_ssh_port=22
            ansible_user='${user}'
            ansible_ssh_private_key_file=pk
            ansible_ssh_extra_args='-o StrictHostKeyChecking=no'
          repository: https://github.com/CloudVE/ansible-docker-boot
          runner: ansible
          sshUser: ubuntu
        config_cloudlaunch:
          firewall:
          - rules:
            - cidr: 0.0.0.0/0
              from: '22'
              protocol: tcp
              to: '22'
            - cidr: 0.0.0.0/0
              from: '80'
              protocol: tcp
              to: '80'
            - cidr: 0.0.0.0/0
              from: '443'
              protocol: tcp
              to: '443'
            - cidr: 0.0.0.0/0
              from: '4430'
              protocol: tcp
              to: '4430'
            - cidr: 0.0.0.0/0
              from: '6443'
              protocol: tcp
              to: '6443'
            - cidr: 0.0.0.0/0
              from: '2379'
              protocol: tcp
              to: '2380'
            - cidr: 0.0.0.0/0
              from: '10250'
              protocol: tcp
              to: '10250'
            - cidr: 0.0.0.0/0
              from: '10251'
              protocol: tcp
              to: '10251'
            - cidr: 0.0.0.0/0
              from: '10252'
              protocol: tcp
              to: '10252'
            - cidr: 0.0.0.0/0
              from: '10256'
              protocol: tcp
              to: '10256'
            - cidr: 0.0.0.0/0
              from: '30000'
              protocol: tcp
              to: '32767'
            - from: '1'
              protocol: tcp
              src_group: cloudlaunch-cm2
              to: '65535'
            - from: '1'
              protocol: udp
              src_group: cloudlaunch-cm2
              to: '65535'
            securityGroup: cloudlaunch-cm2
          vmType: m1.medium
        config_cloudman2:
          cm_boot_image: cloudve/cloudman-boot
          cm_helm_values:
            helmsman_config:
              charts:
              - name: cloudve/galaxy-cvmfs-csi
                namespace: cvmfs
  - slug: pulsar-dev
    name: Pulsar-Dev
    status: DEV
    summary: Using docker to launch pulsar
    maintainer: amahmou4@jhu.edu
    description: ''
    info_url: null
    icon_url: |-
      https://camo.githubusercontent.com/a774a60ab16bbad3dcb425e51cdecc1093159981/68747470733a2f2f67616c61787970726f6a6563742e6f72672f696d616765732f67616c6178792d6c6f676f732f70756c7361725f7472616e73706172656e742e706e67
    display_order: 10000
    default_version: Latest
    default_launch_config: ''
    versions:
    - version: Latest
      frontend_component_path: |-
        app/marketplace/plugins/plugins.module#PluginsModule
      frontend_component_name: clui-ubuntu-config
      backend_component_name: |-
        cloudlaunch.backend_plugins.simple_web_app.SimpleWebAppPlugin
      default_launch_config:
        config_cloudlaunch:
          firewall:
          - rules:
            - cidr: 0.0.0.0/0
              from: '8913'
              protocol: tcp
              to: '8913'
            - cidr: 0.0.0.0/0
              from: '22'
              protocol: tcp
              to: '22'
            securityGroup: cloudlaunch-docker
          instanceType: m1.large
          instance_user_data: |-
            #!/bin/bash
            sudo apt-get update && sudo apt-get install apt-transport-https ca-certificates curl software-properties-common && curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - && sudo apt-key fingerprint 0EBFCD88 && sudo add-apt-repository 'deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable' && sudo apt-get update && sudo apt-get install docker-ce && docker run -it -p 8913:8913 galaxy/pulsar:dev
  - slug: pulsar-standalone
    name: Galaxy Cloud Bursting
    status: LIVE
    summary: |-
      Create temporary worker nodes for Galaxy and enable cloud-bursting.
    maintainer: help@gvl.edu.au
    description: |-
      Enable bursting of user jobs to remote cloud compute resources for the Galaxy application. Configure Galaxy to use the GalaxyCloudRunner library and automatically route user jobs to remote worker nodes running on the cloud. The GalaxyCloudRunner will discover what Pulsar nodes are available by querying the CloudLaunch API.
    info_url: https://galaxycloudrunner.readthedocs.io/
    icon_url: https://i.imgur.com/QQoVMD2.png
    display_order: 1060
    default_version: '0.1'
    default_launch_config: ''
    versions:
    - version: '0.1'
      frontend_component_path: |-
        app/marketplace/plugins/plugins.module#PluginsModule
      frontend_component_name: clui-ubuntu-config
      backend_component_name: |-
        cloudlaunch.backend_plugins.pulsar_app.PulsarAppPlugin
      default_launch_config:
        config_appliance:
          inventoryTemplate: |-
            ${host}

            [all:vars]
            ansible_ssh_port=22
            ansible_user='${user}'
            ansible_ssh_private_key_file=pk
            ansible_ssh_extra_args='-o StrictHostKeyChecking=no'
          repository: https://github.com/CloudVE/ansible-docker-boot
          runner: ansible
        config_cloudlaunch:
          firewall:
          - rules:
            - cidr: 0.0.0.0/0
              from: '8913'
              protocol: tcp
              to: '8913'
            - cidr: 0.0.0.0/0
              from: '22'
              protocol: tcp
              to: '22'
            securityGroup: cloudlaunch-pulsar
  - slug: pulsar-remote-compute-pool
    name: Pulsar Remote Compute Pool
    status: LIVE
    summary: |-
      An autoscaling remote compute pool for Pulsar.
    maintainer: help@gvl.edu.au
    description: |-
      An autoscaling remote compute pool for Pulsar.
    info_url: https://galaxycloudrunner.readthedocs.io/
    icon_url: https://i.imgur.com/QQoVMD2.png
    default_version: 0.1.0
    display_order: 1050
    versions:
    - version: 0.1.0
      frontend_component_path: |-
        app/marketplace/plugins/plugins.module#PluginsModule
      frontend_component_name: clui-cm2-config
      backend_component_name: |-
        cloudlaunch.backend_plugins.cloudman2_app.CloudMan2AppPlugin
      default_launch_config:
        config_appliance:
          inventoryTemplate: |-
            ${host}

            [all:vars]
            ansible_ssh_port=22
            ansible_user='${user}'
            ansible_ssh_private_key_file=pk
            ansible_ssh_extra_args='-o StrictHostKeyChecking=no'
          repository: https://github.com/CloudVE/ansible-docker-boot
          runner: ansible
          sshUser: ubuntu
        config_cloudlaunch:
          firewall:
          - rules:
            - cidr: 0.0.0.0/0
              from: '22'
              protocol: tcp
              to: '22'
            - cidr: 0.0.0.0/0
              from: '80'
              protocol: tcp
              to: '80'
            - cidr: 0.0.0.0/0
              from: '443'
              protocol: tcp
              to: '443'
            - cidr: 0.0.0.0/0
              from: '4430'
              protocol: tcp
              to: '4430'
            - cidr: 0.0.0.0/0
              from: '6443'
              protocol: tcp
              to: '6443'
            - cidr: 0.0.0.0/0
              from: '2379'
              protocol: tcp
              to: '2380'
            - cidr: 0.0.0.0/0
              from: '10250'
              protocol: tcp
              to: '10250'
            - cidr: 0.0.0.0/0
              from: '10251'
              protocol: tcp
              to: '10251'
            - cidr: 0.0.0.0/0
              from: '10252'
              protocol: tcp
              to: '10252'
            - cidr: 0.0.0.0/0
              from: '10256'
              protocol: tcp
              to: '10256'
            - cidr: 0.0.0.0/0
              from: '30000'
              protocol: tcp
              to: '32767'
            - from: '1'
              protocol: tcp
              src_group: cloudlaunch-cm2
              to: '65535'
            - from: '1'
              protocol: udp
              src_group: cloudlaunch-cm2
              to: '65535'
            securityGroup: cloudlaunch-cm2
          vmType: m1.medium
        config_cloudman2:
          cm_boot_image: galaxy/cloudman-boot:gvl-5.0
          cm_helm_values: |-
            influxdb:
              setDefaultUser:
                password: {{ random_client_secret }}
            cluster_type: KUBE_RANCHER
            rancher_url: "https://{{ rancher_server }}:{{ rancher_port }}"
            rancher_api_key: "{{ token }}"
            rancher_cluster_id: "{{ cluster_id }}"
            rancher_project_id: "{{ project_id }}"
            cm_initial_cluster_data: "{{ cm_initial_cluster_data|default('') }}"
            projman_config:
              projects:
                - name: initial
            helmsman_config:
              repositories:
                 - name: cloudve
                   url: https://raw.githubusercontent.com/CloudVE/helm-charts/gvl-5.0/
                 - name: jupyterhub
                   url: https://jupyterhub.github.io/helm-chart/
            cloudlaunch:
               rabbitmq:
                  rabbitmqErlangCookie: {{ random_client_secret }}{{ random_client_secret }}
               image:
                  repository: galaxy/cloudman-ui
                  tag: gvl-5.0
               resources:
                  requests:
                    cpu: 100m
                    memory: 500Mi
                  limits:
                    cpu: 1000m
                    memory: 3000Mi
               cloudlaunchserver:
                  image:
                    repository: galaxy/cloudman-server
                    tag: gvl-5.0
                  resources:
                    requests:
                      cpu: 500m
                      memory: 1500Mi
                    limits:
                      cpu: 1000m
                      memory: 5000Mi
                  admin_password: "{{ rancher_password }}"
                  postgresql:
                     persistence:
                        storageClass: "ebs"
                  ingress:
                     annotations:
                        kubernetes.io/tls-acme: "true"
                        cert-manager.io/cluster-issuer: letsencrypt-prod
                        nginx.ingress.kubernetes.io/secure-backends: "true"
                     hosts:
                        - ~
            {% if not (rancher_server | ipaddr) %}
                        - "{{ rancher_server }}"
                     tls:
                        - secretName: "{{ rancher_server | replace('.', '-') }}-key"
                          hosts:
                            - "{{ rancher_server }}"
            {% endif %}
               ingress:
                  annotations:
                     kubernetes.io/tls-acme: "true"
                     cert-manager.io/cluster-issuer: letsencrypt-prod
                     nginx.ingress.kubernetes.io/secure-backends: "true"
                  hosts:
                     - ~
            {% if not (rancher_server | ipaddr) %}
                     - "{{ rancher_server }}"
                  tls:
                     - secretName: "{{ rancher_server | replace('.', '-') }}-key"
                       hosts:
                         - "{{ rancher_server }}"
            {% endif %}
            prometheus:
               persistence:
                  storageClass: "nfs"
               grafana:
                  adminPassword: {{ random_client_secret }}
                  grafana.ini:
                     server:
                        root_url: "https://{{ rancher_server }}/grafana"
                     auth.generic_oauth:
                        auth_url: "https://{{ rancher_server }}/auth/realms/master/protocol/openid-connect/auth"
                        token_url: "https://{{ rancher_server }}/auth/realms/master/protocol/openid-connect/token"
                        api_url: "https://{{ rancher_server }}/auth/realms/master/protocol/openid-connect/userinfo"
                  ingress:
                     annotations:
                        kubernetes.io/tls-acme: "true"
                        cert-manager.io/cluster-issuer: letsencrypt-prod
                        nginx.ingress.kubernetes.io/secure-backends: "true"
                     hosts:
                        - ~
            {% if not (rancher_server | ipaddr) %}
                        - "{{ rancher_server }}"
                     tls:
                        - secretName: "{{ rancher_server | replace('.', '-') }}-key"
                          hosts:
                            - "{{ rancher_server }}"
            {% endif %}
            keycloak:
               keycloak:
                   resources:
                     requests:
                        cpu: 100m
                        memory: 750Mi
                     limits:
                        cpu: 1000m
                        memory: 2000Mi
                   password: "{{ rancher_password }}"
                   ingress:
                     enabled: true
                     path: /auth
                     annotations:
                        kubernetes.io/tls-acme: "true"
                        cert-manager.io/cluster-issuer: letsencrypt-prod
                        nginx.ingress.kubernetes.io/secure-backends: "true"
                     hosts:
                        - ~
            {% if not (rancher_server | ipaddr) %}
                        - "{{ rancher_server }}"
                     tls:
                        - secretName: "{{ rancher_server | replace('.', '-') }}-key"
                          hosts:
                            - "{{ rancher_server }}"
            {% endif %}
            global:
               domain: "{{ rancher_server }}"
               deployment_name: "{{ cm_deployment_name }}"
  - slug: g-onramp
    name: G-OnRamp
    status: LIVE
    summary: |-
      An integrated, web-based environment for the interactive annotation of any eukaryotic genome.
    maintainer: G-OnRamp team
    description: "G-OnRamp is an integrated, web-based, and scalable environment that\
      \ enables biologists to utilize large genomic datasets for the interactive annotation\
      \ of any eukaryotic genome. It also serves as a platform to introduce undergraduates\
      \ to \u201Cbig data,\u201D to train them in one type of analysis (genome annotation)\
      \ that is based on using large datasets.\r\n\r\nG-OnRamp is a collaboration between\
      \ the Galaxy Project (https://galaxyproject.org/) and the Genomics Education Partnership\
      \ (https://gep.wustl.edu/). For more information, documentation, and tutorials,\
      \ visit http://g-onramp.org."
    info_url: http://g-onramp.org
    icon_url: https://i.imgur.com/4raxTKH.png
    display_order: 1025
    default_version: '1.1'
    default_launch_config: ''
    versions:
    - version: '1.1'
      frontend_component_path: |-
        app/marketplace/plugins/plugins.module#PluginsModule
      frontend_component_name: clui-ubuntu-config
      backend_component_name: |-
        cloudlaunch.backend_plugins.simple_web_app.SimpleWebAppPlugin
      default_launch_config:
        config_cloudlaunch:
          firewall:
          - rules:
            - cidr: 0.0.0.0/0
              from: '80'
              protocol: tcp
              to: '80'
            - cidr: 0.0.0.0/0
              from: '22'
              protocol: tcp
              to: '22'
            - cidr: 0.0.0.0/0
              from: '20'
              protocol: tcp
              to: '21'
            - cidr: 0.0.0.0/0
              from: '30000'
              protocol: tcp
              to: '40000'
            securityGroup: cl-g-ongramp
          vmType: c5.large
  - slug: genomics-virtual-lab
    name: Genomics Virtual Lab (GVL)
    status: LIVE
    summary: |-
      A versatile genomics workbench with Galaxy, RStudio and Jupyter. USE THIS FOR LATEST GALAXY.
    maintainer: GVL Team
    description: |-
      The Genomics Virtual Laboratory takes the IT out of Bioinformatics. It lets Biologists use a suite of genomics analysis tools that currently often require specialist assistance. The tools provided by the GVL can help you with creating an elastic compute cluster on the cloud and running your analyses on that cluster. The GVL can also help you with protocols and tutorials for common analysis problems.
    info_url: https://genome.edu.au/
    icon_url: https://i.imgur.com/PUZv6iY.png
    display_order: 1000
    default_version: GVL 5.0.0 beta (Galaxy 20.01)
    default_launch_config:
      config_cloudlaunch:
        firewall:
        - rules:
          - cidr: 0.0.0.0/0
            from: '80'
            protocol: tcp
            to: '80'
          - cidr: 0.0.0.0/0
            from: '20'
            protocol: tcp
            to: '22'
          - cidr: 0.0.0.0/0
            from: '22'
            protocol: tcp
            to: '22'
          - cidr: 0.0.0.0/0
            from: '30000'
            protocol: tcp
            to: '30100'
          - cidr: 0.0.0.0/0
            from: '1'
            protocol: tcp
            src_group: cloudlaunch-gvl
            to: '65535'
          securityGroup: cloudlaunch-gvl
        provider_settings:
          ebsOptimised: true
        vmType: m1.medium
      config_gvl:
        config_cloudman:
          cluster_templates:
          - filesystem_templates:
            - name: galaxy
              roles: galaxyTools,galaxyData
            - name: galaxyIndices
              roles: galaxyIndices
            name: Galaxy
          - filesystem_templates:
            - name: galaxy
              type: transient
            name: Data
          masterPostStartScript: |-
            file:///opt/gvl/scripts/triggers;file:///mnt/galaxy/gvl/poststart.d
    versions:
    - version: GVL 4.1.0 - Tutorial Indices
      frontend_component_path: |-
        app/marketplace/plugins/plugins.module#PluginsModule
      frontend_component_name: clui-gvl-config
      backend_component_name: cloudlaunch.backend_plugins.gvl_app.GVLAppPlugin
      default_launch_config: ''
    - version: GVL 4.3.0 (Galaxy 17.09)
      frontend_component_path: |-
        app/marketplace/plugins/plugins.module#PluginsModule
      frontend_component_name: clui-gvl-config
      backend_component_name: cloudlaunch.backend_plugins.gvl_app.GVLAppPlugin
      default_launch_config: ''
    - version: GVL 5.0.0 beta (Galaxy 20.01)
      frontend_component_path: |-
        app/marketplace/plugins/plugins.module#PluginsModule
      frontend_component_name: clui-cm2-config
      backend_component_name: |-
        cloudlaunch.backend_plugins.cloudman2_app.CloudMan2AppPlugin
      default_launch_config:
        config_appliance:
          inventoryTemplate: |-
            ${host}

            [all:vars]
            ansible_ssh_port=22
            ansible_user='${user}'
            ansible_ssh_private_key_file=pk
            ansible_ssh_extra_args='-o StrictHostKeyChecking=no'
          repository: https://github.com/CloudVE/ansible-docker-boot
          runner: ansible
          sshUser: ubuntu
        config_cloudlaunch:
          firewall:
          - rules:
            - cidr: 0.0.0.0/0
              from: '22'
              protocol: tcp
              to: '22'
            - cidr: 0.0.0.0/0
              from: '80'
              protocol: tcp
              to: '80'
            - cidr: 0.0.0.0/0
              from: '443'
              protocol: tcp
              to: '443'
            - cidr: 0.0.0.0/0
              from: '4430'
              protocol: tcp
              to: '4430'
            - cidr: 0.0.0.0/0
              from: '6443'
              protocol: tcp
              to: '6443'
            - cidr: 0.0.0.0/0
              from: '2379'
              protocol: tcp
              to: '2380'
            - cidr: 0.0.0.0/0
              from: '10250'
              protocol: tcp
              to: '10250'
            - cidr: 0.0.0.0/0
              from: '10251'
              protocol: tcp
              to: '10251'
            - cidr: 0.0.0.0/0
              from: '10252'
              protocol: tcp
              to: '10252'
            - cidr: 0.0.0.0/0
              from: '10256'
              protocol: tcp
              to: '10256'
            - cidr: 0.0.0.0/0
              from: '30000'
              protocol: tcp
              to: '32767'
            - from: '1'
              protocol: tcp
              src_group: cloudlaunch-cm2
              to: '65535'
            - from: '1'
              protocol: udp
              src_group: cloudlaunch-cm2
              to: '65535'
            securityGroup: cloudlaunch-cm2
          vmType: m1.medium
        config_cloudman2:
          cm_boot_image: galaxy/cloudman-boot:gvl-5.0
          cm_helm_values: |-
            cluster_type: KUBE_RANCHER
            rancher_url: "https://{{ rancher_server }}:{{ rancher_port }}"
            rancher_api_key: "{{ token }}"
            rancher_cluster_id: "{{ cluster_id }}"
            rancher_project_id: "{{ project_id }}"
            cm_initial_cluster_data: "{{ cm_initial_cluster_data|default('') }}"
            helmsman_config:
              repositories:
                 - name: cloudve
                   url: https://raw.githubusercontent.com/CloudVE/helm-charts/gvl-5.0/
                 - name: jupyterhub
                   url: https://jupyterhub.github.io/helm-chart/
              charts:
                galaxy:
                  name: cloudve/galaxy
                  namespace: initial
                  oidc_client:
                    client_secret: {{ random_client_secret }}
                    redirect_uris:
                      - '{{ '{{' }} include "cloudman.root_url" . {{ '}}{{' }} .Values.helmsman_config.charts.galaxy.values.ingress.path {{ '}}' }}/authnz/custos/callback'
                  tplValues:
                    configs:
                      oidc_backends_config.xml: |
                        <?xml version="1.0"?>
                        <OIDC>
                            <provider name="custos">
                                <url>https://{{ rancher_server }}/auth</url>
                                <client_id>galaxy-auth</client_id>
                                <client_secret>{{ '{{' }}.Values.helmsman_config.charts.galaxy.oidc_client.client_secret {{ '}}' }}</client_secret>
                                <redirect_uri>https://{{ rancher_server }}{{ '{{' }} .Values.helmsman_config.charts.galaxy.values.ingress.path {{ '}}' }}/authnz/custos/callback</redirect_uri>
                                <realm>master</realm>
                            </provider>
                        </OIDC>
                  values:
                    image:
                      repository: galaxy/galaxy-k8s
                      tag: 20.01
                    configs:
                      galaxy.yml:
                        galaxy:
                          session_duration: 30
                    persistence:
                      storageClass: nfs
                      size: 80Gi
                    postgresql:
                      postgresqlPassword: {{ random_client_secret }}
                      postgresqlPostgresPassword: {{ random_client_secret }}
                      persistence:
                        storageClass: ebs
                    ingress:
                      enabled: true
                      annotations:
                         kubernetes.io/tls-acme: "true"
                         cert-manager.io/cluster-issuer: letsencrypt-prod
                         nginx.ingress.kubernetes.io/secure-backends: "true"
                      hosts:
                         - ~
            {% if not (rancher_server | ipaddr) %}
                         - "{{ rancher_server }}"
                      tls:
                         - secretName: "{{ rancher_server | replace('.', '-') }}-key"
                           hosts:
                             - "{{ rancher_server }}"
            {% endif %}
                      path: /initial/galaxy

            cloudlaunch:
               rabbitmq:
                  rabbitmqErlangCookie: {{ random_client_secret }}{{ random_client_secret }}
               image:
                  repository: galaxy/cloudman-ui
                  tag: gvl-5.0
               resources:
                  requests:
                    cpu: 100m
                    memory: 500Mi
                  limits:
                    cpu: 1000m
                    memory: 3000Mi
               cloudlaunchserver:
                  image:
                    repository: galaxy/cloudman-server
                    tag: gvl-5.0
                  resources:
                    requests:
                      cpu: 500m
                      memory: 1500Mi
                    limits:
                      cpu: 1000m
                      memory: 5000Mi
                  admin_password: "{{ rancher_password }}"
                  postgresql:
                     postgresqlPassword: {{ random_client_secret }}
                     postgresqlPostgresPassword: {{ random_client_secret }}
                     persistence:
                        storageClass: "ebs"
                  ingress:
                     annotations:
                        kubernetes.io/tls-acme: "true"
                        cert-manager.io/cluster-issuer: letsencrypt-prod
                        nginx.ingress.kubernetes.io/secure-backends: "true"
                     hosts:
                        - ~
            {% if not (rancher_server | ipaddr) %}
                        - "{{ rancher_server }}"
                     tls:
                        - secretName: "{{ rancher_server | replace('.', '-') }}-key"
                          hosts:
                            - "{{ rancher_server }}"
            {% endif %}
               ingress:
                  annotations:
                     kubernetes.io/tls-acme: "true"
                     cert-manager.io/cluster-issuer: letsencrypt-prod
                     nginx.ingress.kubernetes.io/secure-backends: "true"
                  hosts:
                     - ~
            {% if not (rancher_server | ipaddr) %}
                     - "{{ rancher_server }}"
                  tls:
                     - secretName: "{{ rancher_server | replace('.', '-') }}-key"
                       hosts:
                         - "{{ rancher_server }}"
            {% endif %}
            prometheus:
               persistence:
                  storageClass: "nfs"
               alertmanager:
                  config:
                     global:
                        http_config:
                           basic_auth:
                              password: {{ random_client_secret }}
               grafana:
                  adminPassword: {{ random_client_secret }}
                  grafana.ini:
                     server:
                        root_url: "https://{{ rancher_server }}/grafana"
                     auth.generic_oauth:
                        auth_url: "https://{{ rancher_server }}/auth/realms/master/protocol/openid-connect/auth"
                        token_url: "https://{{ rancher_server }}/auth/realms/master/protocol/openid-connect/token"
                        api_url: "https://{{ rancher_server }}/auth/realms/master/protocol/openid-connect/userinfo"
                  ingress:
                     annotations:
                        kubernetes.io/tls-acme: "true"
                        cert-manager.io/cluster-issuer: letsencrypt-prod
                        nginx.ingress.kubernetes.io/secure-backends: "true"
                     hosts:
                        - ~
            {% if not (rancher_server | ipaddr) %}
                        - "{{ rancher_server }}"
                     tls:
                        - secretName: "{{ rancher_server | replace('.', '-') }}-key"
                          hosts:
                            - "{{ rancher_server }}"
            {% endif %}
            keycloak:
               keycloak:
                   resources:
                     requests:
                        cpu: 100m
                        memory: 750Mi
                     limits:
                        cpu: 1000m
                        memory: 2000Mi
                   password: "{{ rancher_password }}"
                   ingress:
                     enabled: true
                     path: /auth
                     annotations:
                        kubernetes.io/tls-acme: "true"
                        cert-manager.io/cluster-issuer: letsencrypt-prod
                        nginx.ingress.kubernetes.io/secure-backends: "true"
                     hosts:
                        - ~
            {% if not (rancher_server | ipaddr) %}
                        - "{{ rancher_server }}"
                     tls:
                        - secretName: "{{ rancher_server | replace('.', '-') }}-key"
                          hosts:
                            - "{{ rancher_server }}"
            {% endif %}
            influxdb:
              setDefaultUser:
                password: {{ random_client_secret }}
            global:
               domain: "{{ rancher_server }}"
               deployment_name: "{{ cm_deployment_name }}"
    - version: GVL 4.2.0 - Blank Indices
      frontend_component_path: |-
        app/marketplace/plugins/plugins.module#PluginsModule
      frontend_component_name: clui-gvl-config
      backend_component_name: cloudlaunch.backend_plugins.gvl_app.GVLAppPlugin
      default_launch_config: ''
    - version: GVL 4.2.0 - Tutorial Indices
      frontend_component_path: |-
        app/marketplace/plugins/plugins.module#PluginsModule
      frontend_component_name: clui-gvl-config
      backend_component_name: cloudlaunch.backend_plugins.gvl_app.GVLAppPlugin
      default_launch_config: ''
    - version: GVL 4.2.0 - Blank+cmd
      frontend_component_path: |-
        app/marketplace/plugins/plugins.module#PluginsModule
      frontend_component_name: clui-gvl-config
      backend_component_name: cloudlaunch.backend_plugins.gvl_app.GVLAppPlugin
      default_launch_config: ''
    - version: GVL 4.4.0 (Galaxy 18.05)
      frontend_component_path: |-
        app/marketplace/plugins/plugins.module#PluginsModule
      frontend_component_name: clui-gvl-config
      backend_component_name: cloudlaunch.backend_plugins.gvl_app.GVLAppPlugin
      default_launch_config: ''
    - version: GVL 4.1.0 - Blank Indices
      frontend_component_path: |-
        app/marketplace/plugins/plugins.module#PluginsModule
      frontend_component_name: clui-gvl-config
      backend_component_name: cloudlaunch.backend_plugins.gvl_app.GVLAppPlugin
      default_launch_config: ''
  - slug: galaxy-user-based-objectstore
    name: 'Galaxy: User-Based ObjectStore'
    status: LIVE
    summary: Galaxy with User-Based ObjectStore
    maintainer: Vahid Jalili & Alexandru Mahmoud
    description: |-
      Galaxy 19.09 on Kubernetes, with User-Based ObjectStore
    info_url: null
    icon_url: https://i.imgur.com/bVPmVYo.png
    display_order: 10000
    default_version: 0.3.0 (Galaxy 19.09 w/ UBOS)
    default_launch_config:
      config_appliance:
        inventoryTemplate: |-
          ${host}

          [all:vars]
          ansible_ssh_port=22
          ansible_user='${user}'
          ansible_ssh_private_key_file=pk
          ansible_ssh_extra_args='-o StrictHostKeyChecking=no'
        repository: https://github.com/CloudVE/ansible-docker-boot
        runner: ansible
        sshUser: ubuntu
      config_cloudlaunch:
        firewall:
        - rules:
          - cidr: 0.0.0.0/0
            from: '22'
            protocol: tcp
            to: '22'
          - cidr: 0.0.0.0/0
            from: '80'
            protocol: tcp
            to: '80'
          - cidr: 0.0.0.0/0
            from: '443'
            protocol: tcp
            to: '443'
          - cidr: 0.0.0.0/0
            from: '4430'
            protocol: tcp
            to: '4430'
          - cidr: 0.0.0.0/0
            from: '6443'
            protocol: tcp
            to: '6443'
          - cidr: 0.0.0.0/0
            from: '2379'
            protocol: tcp
            to: '2380'
          - cidr: 0.0.0.0/0
            from: '10250'
            protocol: tcp
            to: '10250'
          - cidr: 0.0.0.0/0
            from: '10251'
            protocol: tcp
            to: '10251'
          - cidr: 0.0.0.0/0
            from: '10252'
            protocol: tcp
            to: '10252'
          - cidr: 0.0.0.0/0
            from: '10256'
            protocol: tcp
            to: '10256'
          - cidr: 0.0.0.0/0
            from: '30000'
            protocol: tcp
            to: '32767'
          - from: '1'
            protocol: tcp
            src_group: cloudlaunch-cm2
            to: '65535'
          - from: '1'
            protocol: udp
            src_group: cloudlaunch-cm2
            to: '65535'
          securityGroup: cloudlaunch-cm2
        vmType: m1.medium
      config_cloudman2:
        cm_boot_image: almahmoud/cloudman-boot-vahid:latest
    versions:
    - version: 0.0 (dev)
      frontend_component_path: |-
        app/marketplace/plugins/plugins.module#PluginsModule
      frontend_component_name: clui-cm2-config
      backend_component_name: |-
        cloudlaunch.backend_plugins.cloudman2_app.CloudMan2AppPlugin
      default_launch_config:
        config_appliance:
          inventoryTemplate: |-
            ${host}

            [all:vars]
            ansible_ssh_port=22
            ansible_user='${user}'
            ansible_ssh_private_key_file=pk
            ansible_ssh_extra_args='-o StrictHostKeyChecking=no'
          repository: https://github.com/CloudVE/ansible-docker-boot
          runner: ansible
          sshUser: ubuntu
        config_cloudlaunch:
          firewall:
          - rules:
            - cidr: 0.0.0.0/0
              from: '22'
              protocol: tcp
              to: '22'
            - cidr: 0.0.0.0/0
              from: '80'
              protocol: tcp
              to: '80'
            - cidr: 0.0.0.0/0
              from: '443'
              protocol: tcp
              to: '443'
            - cidr: 0.0.0.0/0
              from: '4430'
              protocol: tcp
              to: '4430'
            - cidr: 0.0.0.0/0
              from: '6443'
              protocol: tcp
              to: '6443'
            - cidr: 0.0.0.0/0
              from: '2379'
              protocol: tcp
              to: '2380'
            - cidr: 0.0.0.0/0
              from: '10250'
              protocol: tcp
              to: '10250'
            - cidr: 0.0.0.0/0
              from: '10251'
              protocol: tcp
              to: '10251'
            - cidr: 0.0.0.0/0
              from: '10252'
              protocol: tcp
              to: '10252'
            - cidr: 0.0.0.0/0
              from: '10256'
              protocol: tcp
              to: '10256'
            - cidr: 0.0.0.0/0
              from: '30000'
              protocol: tcp
              to: '32767'
            - from: '1'
              protocol: tcp
              src_group: cloudlaunch-cm2
              to: '65535'
            - from: '1'
              protocol: udp
              src_group: cloudlaunch-cm2
              to: '65535'
            securityGroup: cloudlaunch-cm2
          vmType: m1.medium
        config_cloudman2:
          cm_boot_image: almahmoud/cloudman-boot:oidc
    - version: 0.3.0 (Galaxy 19.09 w/ UBOS)
      frontend_component_path: |-
        app/marketplace/plugins/plugins.module#PluginsModule
      frontend_component_name: clui-cm2-config
      backend_component_name: |-
        cloudlaunch.backend_plugins.cloudman2_app.CloudMan2AppPlugin
      default_launch_config:
        config_appliance:
          inventoryTemplate: |-
            ${host}

            [all:vars]
            ansible_ssh_port=22
            ansible_user='${user}'
            ansible_ssh_private_key_file=pk
            ansible_ssh_extra_args='-o StrictHostKeyChecking=no'
          repository: https://github.com/CloudVE/ansible-docker-boot
          runner: ansible
          sshUser: ubuntu
        config_cloudlaunch:
          firewall:
          - rules:
            - cidr: 0.0.0.0/0
              from: '22'
              protocol: tcp
              to: '22'
            - cidr: 0.0.0.0/0
              from: '80'
              protocol: tcp
              to: '80'
            - cidr: 0.0.0.0/0
              from: '443'
              protocol: tcp
              to: '443'
            - cidr: 0.0.0.0/0
              from: '4430'
              protocol: tcp
              to: '4430'
            - cidr: 0.0.0.0/0
              from: '6443'
              protocol: tcp
              to: '6443'
            - cidr: 0.0.0.0/0
              from: '2379'
              protocol: tcp
              to: '2380'
            - cidr: 0.0.0.0/0
              from: '10250'
              protocol: tcp
              to: '10250'
            - cidr: 0.0.0.0/0
              from: '10251'
              protocol: tcp
              to: '10251'
            - cidr: 0.0.0.0/0
              from: '10252'
              protocol: tcp
              to: '10252'
            - cidr: 0.0.0.0/0
              from: '10256'
              protocol: tcp
              to: '10256'
            - cidr: 0.0.0.0/0
              from: '30000'
              protocol: tcp
              to: '32767'
            - from: '1'
              protocol: tcp
              src_group: cloudlaunch-cm2
              to: '65535'
            - from: '1'
              protocol: udp
              src_group: cloudlaunch-cm2
              to: '65535'
            securityGroup: cloudlaunch-cm2
          vmType: m1.medium
        config_cloudman2:
          cm_boot_image: cloudve/cloudman-boot
          cm_helm_values: |-
            cluster_type: KUBE_RANCHER
            rancher_url: "https://{{ rancher_server }}:{{ rancher_port }}"
            rancher_api_key: "{{ token }}"
            rancher_cluster_id: "{{ cluster_id }}"
            rancher_project_id: "{{ project_id }}"
            cm_initial_cluster_data: "{{ cm_initial_cluster_data|default('') }}"
            helmsman_config:
              repositories:
                 - name: cloudve
                   url: https://raw.githubusercontent.com/CloudVE/helm-charts/master/
                 - name: jupyterhub
                   url: https://jupyterhub.github.io/helm-chart/
              charts:
                dashboard:
                  name: stable/kubernetes-dashboard
                  namespace: kube-system
                  values:
                    rbac:
                      clusterAdminRole: true
                    ingress:
                      enabled: true
                      annotations:
                         kubernetes.io/tls-acme: "true"
                         cert-manager.io/cluster-issuer: letsencrypt-prod
                         nginx.ingress.kubernetes.io/secure-backends: "true"
                      hosts:
                         - ~
            {% if not (rancher_server | ipaddr) %}
                         - "{{ rancher_server }}"
                      tls:
                         - secretName: "{{ rancher_server | replace('.', '-') }}-key"
                           hosts:
                             - "{{ rancher_server }}"
            {% endif %}
                      paths:
                        - /dashboard
                        - /dashboard/*
                    enableInsecureLogin: true
                cvmfs:
                  name: cloudve/galaxy-cvmfs-csi
                  namespace: cvmfs
                galaxy:
                  name: cloudve/galaxy
                  namespace: default
                  oidc_client:
                    client_secret: {{ random_client_secret }}
                    redirect_uris:
                      - '{{ '{{' }} include "cloudman.root_url" . {{ '}}{{' }} .Values.helmsman_config.charts.galaxy.values.ingress.path {{ '}}' }}/authnz/custos/callback'
                  tplValues:
                    configs:
                      oidc_backends_config.xml: |
                        <?xml version="1.0"?>
                        <OIDC>
                            <provider name="custos">
                                <url>https://{{ rancher_server }}/auth</url>
                                <client_id>galaxy-auth</client_id>
                                <client_secret>{{ '{{' }}.Values.helmsman_config.charts.galaxy.oidc_client.client_secret {{ '}}' }}</client_secret>
                                <redirect_uri>https://{{ rancher_server }}{{ '{{' }} .Values.helmsman_config.charts.galaxy.values.ingress.path {{ '}}' }}/authnz/custos/callback</redirect_uri>
                                <realm>master</realm>
                            </provider>
                        </OIDC>
                  values:
                    image:
                      repository: vjalili/ubos
                      tag: ubos
                      pullPolicy: Always
                    configs:
                      galaxy.yml: |
                        uwsgi:
                          virtualenv: /galaxy/server/.venv
                          processes: 1
                          http: 0.0.0.0:8080
                          static-map: /static/style=/galaxy/server/static/style/blue
                          static-map: /static=/galaxy/server/static
                          static-map: /favicon.ico=/galaxy/server/static/favicon.ico
                          pythonpath: /galaxy/server/lib
                          thunder-lock: true
                          manage-script-name: true
                          mount: {{ '{{' }}.Values.ingress.path{{ '}}' }}=galaxy.webapps.galaxy.buildapp:uwsgi_app()
                          buffer-size: 16384
                          offload-threads: 2
                          threads: 4
                          die-on-term: true
                          master: true
                          hook-master-start: unix_signal:2 gracefully_kill_them_all
                          enable-threads: true
                          py-call-osafterfork: true
                        galaxy:
                          database_connection: 'postgresql://{{ '{{' }}.Values.postgresql.galaxyDatabaseUser{{ '}}' }}:{{ '{{' }}.Values.postgresql.galaxyDatabasePassword{{ '}}' }}@{{ '{{' }} template "galaxy-postgresql.fullname" . {{ '}}' }}/galaxy'
                          integrated_tool_panel_config: "/galaxy/server/config/mutable/integrated_tool_panel.xml"
                          sanitize_whitelist_file: "/galaxy/server/config/mutable/sanitize_whitelist.txt"
                          tool_config_file: "/galaxy/server/config/tool_conf.xml,{{ '{{' }}.Values.cvmfs.main.mountPath {{ '}}' }}/config/shed_tool_conf.xml"
                          shed_tool_config_file: "{{ '{{' }}.Values.persistence.mountPath{{ '}}' }}/config/editable_shed_tool_conf.xml"
                          tool_data_table_config_path: "{{ '{{' }}.Values.cvmfs.main.mountPath {{ '}}' }}/config/shed_tool_data_table_conf.xml,{{ '{{' }}.Values.cvmfs.data.mountPath{{ '}}' }}/managed/location/tool_data_table_conf.xml,{{ '{{' }}.Values.cvmfs.data.mountPath{{ '}}' }}/byhand/location/tool_data_table_conf.xml"
                          tool_dependency_dir: "{{ '{{' }}.Values.persistence.mountPath{{ '}}' }}/deps"
                          builds_file_path: "{{ '{{' }}.Values.cvmfs.data.mountPath{{ '}}' }}/managed/location/builds.txt"
                          datatypes_config_file: "{{ '{{' }}.Values.cvmfs.main.mountPath {{ '}}' }}/config/datatypes_conf.xml"
                          containers_resolvers_config_file: "/galaxy/server/config/container_resolvers_conf.xml"
                          workflow_schedulers_config_file: "/galaxy/server/config/workflow_schedulers_conf.xml"
                          build_sites_config_file: "/galaxy/server/config/build_sites.yml"
                          enable_oidc: true
                          oidc_config_file: /galaxy/server/config/oidc_config.xml
                          oidc_backends_config_file: /galaxy/server/config/oidc_backends_config.xml
                      oidc_config.xml: |
                        <?xml version="1.0"?>
                        <OIDC>
                            <Setter Property="VERIFY_SSL" Value="False" Type="bool"/>
                            <Setter Property="REQUESTS_TIMEOUT" Value="3600" Type="float"/>
                            <Setter Property="ID_TOKEN_MAX_AGE" Value="3600" Type="float"/>
                        </OIDC>
                    persistence:
                      storageClass: nfs-provisioner
                      size: 95Gi
                    postgresql:
                      postgresqlPassword: {{ random_client_secret }}
                      postgresqlPostgresPassword: {{ random_client_secret }}
                      persistence:
                        storageClass: ebs-provisioner
                    ingress:
                      enabled: true
                      annotations:
                         kubernetes.io/tls-acme: "true"
                         cert-manager.io/cluster-issuer: letsencrypt-prod
                         nginx.ingress.kubernetes.io/secure-backends: "true"
                      hosts:
                         - ~
            {% if not (rancher_server | ipaddr) %}
                         - "{{ rancher_server }}"
                      tls:
                         - secretName: "{{ rancher_server | replace('.', '-') }}-key"
                           hosts:
                             - "{{ rancher_server }}"
            {% endif %}
                      path: /default/galaxy

            cloudlaunch:
               cloudlaunchserver:
                  admin_password: "{{ rancher_password }}"
                  postgresql:
                     postgresqlPassword: {{ random_client_secret }}
                     postgresqlPostgresPassword: {{ random_client_secret }}
                     persistence:
                        storageClass: "ebs-provisioner"
                  ingress:
                     annotations:
                        kubernetes.io/tls-acme: "true"
                        cert-manager.io/cluster-issuer: letsencrypt-prod
                        nginx.ingress.kubernetes.io/secure-backends: "true"
                     hosts:
                        - ~
            {% if not (rancher_server | ipaddr) %}
                        - "{{ rancher_server }}"
                     tls:
                        - secretName: "{{ rancher_server | replace('.', '-') }}-key"
                          hosts:
                            - "{{ rancher_server }}"
            {% endif %}
               ingress:
                  annotations:
                     kubernetes.io/tls-acme: "true"
                     cert-manager.io/cluster-issuer: letsencrypt-prod
                     nginx.ingress.kubernetes.io/secure-backends: "true"
                  hosts:
                     - ~
            {% if not (rancher_server | ipaddr) %}
                     - "{{ rancher_server }}"
                  tls:
                     - secretName: "{{ rancher_server | replace('.', '-') }}-key"
                       hosts:
                         - "{{ rancher_server }}"
            {% endif %}
            prometheus:
               persistence:
                  storageClass: "nfs-provisioner"
               grafana:
                  domain: "{{ rancher_server }}"
                  ingress:
                     annotations:
                        kubernetes.io/tls-acme: "true"
                        cert-manager.io/cluster-issuer: letsencrypt-prod
                        nginx.ingress.kubernetes.io/secure-backends: "true"
                     hosts:
                        - ~
            {% if not (rancher_server | ipaddr) %}
                        - "{{ rancher_server }}"
                     tls:
                        - secretName: "{{ rancher_server | replace('.', '-') }}-key"
                          hosts:
                            - "{{ rancher_server }}"
            {% endif %}
            keycloak:
               keycloak:
                   password: "{{ rancher_password }}"
                   ingress:
                     enabled: true
                     path: /auth
                     annotations:
                        kubernetes.io/tls-acme: "true"
                        cert-manager.io/cluster-issuer: letsencrypt-prod
                        nginx.ingress.kubernetes.io/secure-backends: "true"
                     hosts:
                        - ~
            {% if not (rancher_server | ipaddr) %}
                        - "{{ rancher_server }}"
                     tls:
                        - secretName: "{{ rancher_server | replace('.', '-') }}-key"
                          hosts:
                            - "{{ rancher_server }}"
            {% endif %}
            global:
               domain: "{{ rancher_server }}"
               deployment_name: "{{ cm_deployment_name }}"
    - version: 0.2.0 (Galaxy 19.09)
      frontend_component_path: |-
        app/marketplace/plugins/plugins.module#PluginsModule
      frontend_component_name: clui-cm2-config
      backend_component_name: |-
        cloudlaunch.backend_plugins.cloudman2_app.CloudMan2AppPlugin
      default_launch_config:
        config_appliance:
          inventoryTemplate: |-
            ${host}

            [all:vars]
            ansible_ssh_port=22
            ansible_user='${user}'
            ansible_ssh_private_key_file=pk
            ansible_ssh_extra_args='-o StrictHostKeyChecking=no'
          repository: https://github.com/CloudVE/ansible-docker-boot
          runner: ansible
          sshUser: ubuntu
        config_cloudlaunch:
          firewall:
          - rules:
            - cidr: 0.0.0.0/0
              from: '22'
              protocol: tcp
              to: '22'
            - cidr: 0.0.0.0/0
              from: '80'
              protocol: tcp
              to: '80'
            - cidr: 0.0.0.0/0
              from: '443'
              protocol: tcp
              to: '443'
            - cidr: 0.0.0.0/0
              from: '4430'
              protocol: tcp
              to: '4430'
            - cidr: 0.0.0.0/0
              from: '6443'
              protocol: tcp
              to: '6443'
            - cidr: 0.0.0.0/0
              from: '2379'
              protocol: tcp
              to: '2380'
            - cidr: 0.0.0.0/0
              from: '10250'
              protocol: tcp
              to: '10250'
            - cidr: 0.0.0.0/0
              from: '10251'
              protocol: tcp
              to: '10251'
            - cidr: 0.0.0.0/0
              from: '10252'
              protocol: tcp
              to: '10252'
            - cidr: 0.0.0.0/0
              from: '10256'
              protocol: tcp
              to: '10256'
            - cidr: 0.0.0.0/0
              from: '30000'
              protocol: tcp
              to: '32767'
            - from: '1'
              protocol: tcp
              src_group: cloudlaunch-cm2
              to: '65535'
            - from: '1'
              protocol: udp
              src_group: cloudlaunch-cm2
              to: '65535'
            securityGroup: cloudlaunch-cm2
          vmType: m1.medium
        config_cloudman2:
          cm_boot_image: almahmoud/cloudman-boot-vahid:latest
